syntax = "proto3";

package example.message.v1;
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "ddb/v1/options.proto";

// DirtyNess describes how dirty a sink is
enum Dirtyness {
    // unknown amount of dirtyness
    DIRTYNESS_UNSPECIFIED = 0;
    // no dirtyness
    DIRTYNESS_CLEAN = 1;
}

// Engine of a car
message Engine {
    // brand name
    string brand = 1;
    // how dirty is the sink
    Dirtyness dirtyness = 2;
}

// Car message
message Car {
    // kitchen sink
    Engine engine = 1;
    // how many wheels does the car have
    int64 nr_of_wheels = 3 [(ddb.v1.field).pk=true,(ddb.v1.field).name="ws"];
    // name of the car
    string name = 2 [(ddb.v1.field).sk=true];
}

// Appliance in the kitchen
message Appliance{
    // brand of the appliance
    string brand = 1;
}

// Ignored message tests omitting of fields works correctly
message Ignored {
    //pk is omitted
    string pk = 1 [(ddb.v1.field).pk=true,(ddb.v1.field).omit=true];
    //sk is omitted
    string sk = 2 [(ddb.v1.field).sk=true,(ddb.v1.field).omit=true];
    // other field is also omitted
    string other = 3 [(ddb.v1.field).omit=true];
    // visible method is not omitted
    string visible = 4;
}


// Kitchen holds all possible Protobuf field types
message Kitchen {
    // brand of kitchen
    string brand = 1 [(ddb.v1.field).pk=true];
    // is the kitchen renovated
    bool is_renovated = 2;
    // some data
    bytes qr_code = 3 [(ddb.v1.field).sk=true];

    // small knife count
    int32 num_small_knifes = 4;
    // sharp kife count
    fixed32 num_sharp_knifes = 5;
    // blunt knife count
    uint32 num_blunt_knifes = 6;

    // num small forks
    int64 num_small_forks = 7;
    // num medium forks
    fixed64 num_medium_forks = 8;
    // large forks count
    uint64 num_large_forks = 9;

    // how many of the tiles are black
    float percent_black_tiles = 10;
    // precent white tiles
    double percent_white_tiles = 11;
    // dirtyness enum
    Dirtyness dirtyness = 12;

    // map with messages
    map<int64,Appliance> furniture = 13;
    // map with numbers
    map<string,int64> calendar = 14;

    // nested message
    Engine washer_engine = 15;
    // extra nested message to test recursion
    Kitchen extra_kitchen = 16;
    
    // well-known Duration
    google.protobuf.Duration timer = 17;
    // well-known Timestamp
    google.protobuf.Timestamp wall_time = 18;

    // nested list of messages
    repeated Engine appliance_engines = 19;
    // repeated basic type
    repeated string other_brands = 20;
    // well-known Any field
    google.protobuf.Any some_any = 21;
    // well-known FieldMask field
    google.protobuf.FieldMask some_mask = 22;
    // struct value
    google.protobuf.Value some_value = 23;

    // optional string
    optional string opt_string = 24;
    // string value (other kind of optional)
    google.protobuf.StringValue val_str = 25;
    // string value (other kind of optional)
    google.protobuf.BytesValue val_bytes = 26;

    // list of timestamps
    repeated google.protobuf.Timestamp list_of_ts = 27;

    // set of strings
    repeated string string_set = 28 [(ddb.v1.field).set=true];
    // set of numbers
    repeated int64 number_set = 29 [(ddb.v1.field).set=true];
    // set of bytes
    repeated bytes bytes_set = 30 [(ddb.v1.field).set=true];
}

// Empty message
message Empty {}

// MapGalore holds hopefully most of the map combinations. They are in particular difficult
// to generate valid code for.
message MapGalore {
    // all supported key types
    // int64/int64
    map<int64,int64> int64int64  = 1;
    // uint64/uint64
    map<uint64,uint64> uint64uint64  = 2;
    // fixed64/fixed64
    map<fixed64,fixed64> fixed64fixed64  = 3;
    // sint64/sint64
    map<sint64,sint64> sint64sint64  = 4;
    // sfixed64/sfixed64
    map<sfixed64,sfixed64> sfixed64sfixed64  = 5;
    // int32/int32
    map<int32,int32> int32int32  = 6;
    // uint32/uint32
    map<uint32,uint32> uint32uint32  = 7;
    // fixed32/fixed32
    map<fixed32,fixed32> fixed32fixed32  = 8;
    // sint32/sint32
    map<sint32,sint32> sint32sint32  = 9;
    // sfixed32/sfixed32
    map<sfixed32,sfixed32> sfixed32sfixed32  = 10;
    // string/string
    map<string,string> stringstring = 11;
    // bool/bool
    map<bool,bool> boolbool = 12;

    // rest of supported value types
    // string/bytes
    map<string,bytes> stringbytes = 13;
    // string/double
    map<string,double> stringdouble = 14;
    // string/float
    map<string,float> stringfloat = 15;

    // string/duration
    map<string,google.protobuf.Duration> stringduration = 16;
    // string/duration
    map<string,google.protobuf.Timestamp> stringtimestamp = 17;

    // maps to messages
    map<bool,Engine> boolengine = 18;
    // maps to messages
    map<uint64,Engine> uintengine = 19;
}

// Message for testing structpb value marshalling
message ValueGalore {
    // struct value
    google.protobuf.Value some_value = 1;
}

// FieldPresence message is used to experiment and assert field presence in the generated 
// attribute map
message FieldPresence {
    // string field
    string str = 1 [(ddb.v1.field).name="str"];
    // optional string field
    optional string opt_str = 2 [(ddb.v1.field).name="optStr"];    
    // msg field
    Engine msg = 3 [(ddb.v1.field).name="msg"];
    // optional message field
    optional Engine opt_msg = 4 [(ddb.v1.field).name="optMsg"];
    // list of strings
    repeated string str_list = 5 [(ddb.v1.field).name="strList"];
    // list of messages
    repeated Engine msg_list = 6 [(ddb.v1.field).name="msgList"];
    // map of strings
    map<string,string> str_map = 7 [(ddb.v1.field).name="strMap"];
    // map of messages
    map<string,Engine> msg_map = 8 [(ddb.v1.field).name="msgMap"];
    // enum field
    Dirtyness enum = 9 [(ddb.v1.field).name="enum"];
    // enum field
    optional Dirtyness opt_enum = 10 [(ddb.v1.field).name="optEnum"];
    // one of field
    oneof oo {
        // string option
        string oneof_str = 11 [(ddb.v1.field).name="oneofStr"];
        // msg one option
        Engine oneof_msg = 12 [(ddb.v1.field).name="oneofMsg"];
    }

    // string wrapper
    google.protobuf.StringValue str_val = 13 [(ddb.v1.field).name="strVal"];
    // bool wrapper
    google.protobuf.BoolValue bool_val = 14 [(ddb.v1.field).name="boolVal"];
    // bytes wrapper
    google.protobuf.BytesValue bytes_val = 15 [(ddb.v1.field).name="bytesVal"];
    // double wrapper
    google.protobuf.DoubleValue double_val = 16 [(ddb.v1.field).name="doubleVal"];
    // float wrapper
    google.protobuf.FloatValue float_val = 17 [(ddb.v1.field).name="floatVal"];
    // // in32 wrapper
    google.protobuf.Int32Value int32_val = 18 [(ddb.v1.field).name="int32Val"];
    // // int64 wrapper
    google.protobuf.Int64Value int64_val = 19 [(ddb.v1.field).name="int64Val"];
    // // uint32 wrapper
    google.protobuf.UInt32Value uint32_val = 20 [(ddb.v1.field).name="uint32Val"];
    // // uint64 wrapper
    google.protobuf.UInt64Value uint64_val = 21 [(ddb.v1.field).name="uint64Val"];
}

// JsonFields is a message with different fields encoding as json
message JsonFields {
    // encode a list of basic types into json
    repeated string json_str_list = 1 [(ddb.v1.field).embed=ENCODING_JSON];
    // embed a json message directly with custom name
    Engine json_engine = 3 [(ddb.v1.field).embed=ENCODING_JSON, (ddb.v1.field).name="json_engine"];
    // map with an iteger key
    map<int64,string> json_int_map = 4 [(ddb.v1.field).embed=ENCODING_JSON];
    // encode a list of messages
    repeated Engine json_engine_list = 2 [(ddb.v1.field).embed=ENCODING_JSON];
    // map with bool key, and message type
    map<bool,Engine> json_engine_map = 5 [(ddb.v1.field).embed=ENCODING_JSON];
    // json encoding of a set
    repeated int64 json_nr_set = 6 [(ddb.v1.field).embed=ENCODING_JSON,(ddb.v1.field).set=true];
}