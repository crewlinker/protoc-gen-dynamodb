// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: message/v1/message.proto

package messagev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DirtyNess describes how dirty a sink is
type Dirtyness int32

const (
	// unknown amount of dirtyness
	Dirtyness_DIRTYNESS_UNSPECIFIED Dirtyness = 0
	// no dirtyness
	Dirtyness_DIRTYNESS_CLEAN Dirtyness = 1
)

// Enum value maps for Dirtyness.
var (
	Dirtyness_name = map[int32]string{
		0: "DIRTYNESS_UNSPECIFIED",
		1: "DIRTYNESS_CLEAN",
	}
	Dirtyness_value = map[string]int32{
		"DIRTYNESS_UNSPECIFIED": 0,
		"DIRTYNESS_CLEAN":       1,
	}
)

func (x Dirtyness) Enum() *Dirtyness {
	p := new(Dirtyness)
	*p = x
	return p
}

func (x Dirtyness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dirtyness) Descriptor() protoreflect.EnumDescriptor {
	return file_message_v1_message_proto_enumTypes[0].Descriptor()
}

func (Dirtyness) Type() protoreflect.EnumType {
	return &file_message_v1_message_proto_enumTypes[0]
}

func (x Dirtyness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dirtyness.Descriptor instead.
func (Dirtyness) EnumDescriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{0}
}

// Engine of a car
type Engine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// brand name
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	// how dirty is the sink
	Dirtyness Dirtyness `protobuf:"varint,2,opt,name=dirtyness,proto3,enum=message.v1.Dirtyness" json:"dirtyness,omitempty"`
}

func (x *Engine) Reset() {
	*x = Engine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Engine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Engine) ProtoMessage() {}

func (x *Engine) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Engine.ProtoReflect.Descriptor instead.
func (*Engine) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *Engine) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Engine) GetDirtyness() Dirtyness {
	if x != nil {
		return x.Dirtyness
	}
	return Dirtyness_DIRTYNESS_UNSPECIFIED
}

// Car message
type Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kitchen sink
	Engine *Engine `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// name of the kitchen
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Car) Reset() {
	*x = Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *Car) GetEngine() *Engine {
	if x != nil {
		return x.Engine
	}
	return nil
}

func (x *Car) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Appliance in the kitchen
type Appliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// brand of the appliance
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *Appliance) Reset() {
	*x = Appliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appliance) ProtoMessage() {}

func (x *Appliance) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appliance.ProtoReflect.Descriptor instead.
func (*Appliance) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *Appliance) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

// Kitchen holds all possible Protobuf field types
type Kitchen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// brand of kitchen
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	// is the kitchen renovated
	IsRenovated bool `protobuf:"varint,2,opt,name=is_renovated,json=isRenovated,proto3" json:"is_renovated,omitempty"`
	// some data
	QrCode []byte `protobuf:"bytes,3,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	// small knife count
	NumSmallKnifes int32 `protobuf:"varint,4,opt,name=num_small_knifes,json=numSmallKnifes,proto3" json:"num_small_knifes,omitempty"`
	// sharp kife count
	NumSharpKnifes uint32 `protobuf:"fixed32,5,opt,name=num_sharp_knifes,json=numSharpKnifes,proto3" json:"num_sharp_knifes,omitempty"`
	// blunt knife count
	NumBluntKnifes uint32 `protobuf:"varint,6,opt,name=num_blunt_knifes,json=numBluntKnifes,proto3" json:"num_blunt_knifes,omitempty"`
	// num small forks
	NumSmallForks int64 `protobuf:"varint,7,opt,name=num_small_forks,json=numSmallForks,proto3" json:"num_small_forks,omitempty"`
	// num medium forks
	NumMediumForks uint64 `protobuf:"fixed64,8,opt,name=num_medium_forks,json=numMediumForks,proto3" json:"num_medium_forks,omitempty"`
	// large forks count
	NumLargeForks uint64 `protobuf:"varint,9,opt,name=num_large_forks,json=numLargeForks,proto3" json:"num_large_forks,omitempty"`
	// how many of the tiles are black
	PercentBlackTiles float32 `protobuf:"fixed32,10,opt,name=percent_black_tiles,json=percentBlackTiles,proto3" json:"percent_black_tiles,omitempty"`
	// precent white tiles
	PercentWhiteTiles float64 `protobuf:"fixed64,11,opt,name=percent_white_tiles,json=percentWhiteTiles,proto3" json:"percent_white_tiles,omitempty"`
	// dirtyness enum
	Dirtyness Dirtyness `protobuf:"varint,12,opt,name=dirtyness,proto3,enum=message.v1.Dirtyness" json:"dirtyness,omitempty"`
	// map with messages
	Furniture map[int64]*Appliance `protobuf:"bytes,13,rep,name=furniture,proto3" json:"furniture,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map with numbers
	Calendar map[string]int64 `protobuf:"bytes,14,rep,name=calendar,proto3" json:"calendar,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// nested message
	WasherEngine *Engine `protobuf:"bytes,15,opt,name=washer_engine,json=washerEngine,proto3" json:"washer_engine,omitempty"`
	// extra nested message to test recursion
	ExtraKitchen *Kitchen `protobuf:"bytes,16,opt,name=extra_kitchen,json=extraKitchen,proto3" json:"extra_kitchen,omitempty"`
	// well-known Duration
	Timer *durationpb.Duration `protobuf:"bytes,17,opt,name=timer,proto3" json:"timer,omitempty"`
	// well-known Timestamp
	WallTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// nested list of messages
	ApplianceEngines []*Engine `protobuf:"bytes,19,rep,name=appliance_engines,json=applianceEngines,proto3" json:"appliance_engines,omitempty"`
	// repeated basic type
	OtherBrands []string `protobuf:"bytes,20,rep,name=other_brands,json=otherBrands,proto3" json:"other_brands,omitempty"`
	// well-known Any field
	SomeAny *anypb.Any `protobuf:"bytes,21,opt,name=some_any,json=someAny,proto3" json:"some_any,omitempty"`
}

func (x *Kitchen) Reset() {
	*x = Kitchen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kitchen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kitchen) ProtoMessage() {}

func (x *Kitchen) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kitchen.ProtoReflect.Descriptor instead.
func (*Kitchen) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *Kitchen) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Kitchen) GetIsRenovated() bool {
	if x != nil {
		return x.IsRenovated
	}
	return false
}

func (x *Kitchen) GetQrCode() []byte {
	if x != nil {
		return x.QrCode
	}
	return nil
}

func (x *Kitchen) GetNumSmallKnifes() int32 {
	if x != nil {
		return x.NumSmallKnifes
	}
	return 0
}

func (x *Kitchen) GetNumSharpKnifes() uint32 {
	if x != nil {
		return x.NumSharpKnifes
	}
	return 0
}

func (x *Kitchen) GetNumBluntKnifes() uint32 {
	if x != nil {
		return x.NumBluntKnifes
	}
	return 0
}

func (x *Kitchen) GetNumSmallForks() int64 {
	if x != nil {
		return x.NumSmallForks
	}
	return 0
}

func (x *Kitchen) GetNumMediumForks() uint64 {
	if x != nil {
		return x.NumMediumForks
	}
	return 0
}

func (x *Kitchen) GetNumLargeForks() uint64 {
	if x != nil {
		return x.NumLargeForks
	}
	return 0
}

func (x *Kitchen) GetPercentBlackTiles() float32 {
	if x != nil {
		return x.PercentBlackTiles
	}
	return 0
}

func (x *Kitchen) GetPercentWhiteTiles() float64 {
	if x != nil {
		return x.PercentWhiteTiles
	}
	return 0
}

func (x *Kitchen) GetDirtyness() Dirtyness {
	if x != nil {
		return x.Dirtyness
	}
	return Dirtyness_DIRTYNESS_UNSPECIFIED
}

func (x *Kitchen) GetFurniture() map[int64]*Appliance {
	if x != nil {
		return x.Furniture
	}
	return nil
}

func (x *Kitchen) GetCalendar() map[string]int64 {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *Kitchen) GetWasherEngine() *Engine {
	if x != nil {
		return x.WasherEngine
	}
	return nil
}

func (x *Kitchen) GetExtraKitchen() *Kitchen {
	if x != nil {
		return x.ExtraKitchen
	}
	return nil
}

func (x *Kitchen) GetTimer() *durationpb.Duration {
	if x != nil {
		return x.Timer
	}
	return nil
}

func (x *Kitchen) GetWallTime() *timestamppb.Timestamp {
	if x != nil {
		return x.WallTime
	}
	return nil
}

func (x *Kitchen) GetApplianceEngines() []*Engine {
	if x != nil {
		return x.ApplianceEngines
	}
	return nil
}

func (x *Kitchen) GetOtherBrands() []string {
	if x != nil {
		return x.OtherBrands
	}
	return nil
}

func (x *Kitchen) GetSomeAny() *anypb.Any {
	if x != nil {
		return x.SomeAny
	}
	return nil
}

// Empty message
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{4}
}

// MapGalore holds hopefully most of the map combinations. They are in particular difficult
// to generate valid code for.
type MapGalore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all supported key types
	// int64/int64
	Int64Int64 map[int64]int64 `protobuf:"bytes,1,rep,name=int64int64,proto3" json:"int64int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// uint64/uint64
	Uint64Uint64 map[uint64]uint64 `protobuf:"bytes,2,rep,name=uint64uint64,proto3" json:"uint64uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// fixed64/fixed64
	Fixed64Fixed64 map[uint64]uint64 `protobuf:"bytes,3,rep,name=fixed64fixed64,proto3" json:"fixed64fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// sint64/sint64
	Sint64Sint64 map[int64]int64 `protobuf:"bytes,4,rep,name=sint64sint64,proto3" json:"sint64sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	// sfixed64/sfixed64
	Sfixed64Sfixed64 map[int64]int64 `protobuf:"bytes,5,rep,name=sfixed64sfixed64,proto3" json:"sfixed64sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// int32/int32
	Int32Int32 map[int32]int32 `protobuf:"bytes,6,rep,name=int32int32,proto3" json:"int32int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// uint32/uint32
	Uint32Uint32 map[uint32]uint32 `protobuf:"bytes,7,rep,name=uint32uint32,proto3" json:"uint32uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// fixed32/fixed32
	Fixed32Fixed32 map[uint32]uint32 `protobuf:"bytes,8,rep,name=fixed32fixed32,proto3" json:"fixed32fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// sint32/sint32
	Sint32Sint32 map[int32]int32 `protobuf:"bytes,9,rep,name=sint32sint32,proto3" json:"sint32sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	// sfixed32/sfixed32
	Sfixed32Sfixed32 map[int32]int32 `protobuf:"bytes,10,rep,name=sfixed32sfixed32,proto3" json:"sfixed32sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// string/string
	Stringstring map[string]string `protobuf:"bytes,11,rep,name=stringstring,proto3" json:"stringstring,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// bool/bool
	Boolbool map[bool]bool `protobuf:"bytes,12,rep,name=boolbool,proto3" json:"boolbool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// rest of supported value types
	// string/bytes
	Stringbytes map[string][]byte `protobuf:"bytes,13,rep,name=stringbytes,proto3" json:"stringbytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// string/double
	Stringdouble map[string]float64 `protobuf:"bytes,14,rep,name=stringdouble,proto3" json:"stringdouble,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// string/float
	Stringfloat map[string]float32 `protobuf:"bytes,15,rep,name=stringfloat,proto3" json:"stringfloat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// string/duration
	Stringduration map[string]*durationpb.Duration `protobuf:"bytes,16,rep,name=stringduration,proto3" json:"stringduration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// string/duration
	Stringtimestamp map[string]*timestamppb.Timestamp `protobuf:"bytes,17,rep,name=stringtimestamp,proto3" json:"stringtimestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapGalore) Reset() {
	*x = MapGalore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_v1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapGalore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGalore) ProtoMessage() {}

func (x *MapGalore) ProtoReflect() protoreflect.Message {
	mi := &file_message_v1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGalore.ProtoReflect.Descriptor instead.
func (*MapGalore) Descriptor() ([]byte, []int) {
	return file_message_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *MapGalore) GetInt64Int64() map[int64]int64 {
	if x != nil {
		return x.Int64Int64
	}
	return nil
}

func (x *MapGalore) GetUint64Uint64() map[uint64]uint64 {
	if x != nil {
		return x.Uint64Uint64
	}
	return nil
}

func (x *MapGalore) GetFixed64Fixed64() map[uint64]uint64 {
	if x != nil {
		return x.Fixed64Fixed64
	}
	return nil
}

func (x *MapGalore) GetSint64Sint64() map[int64]int64 {
	if x != nil {
		return x.Sint64Sint64
	}
	return nil
}

func (x *MapGalore) GetSfixed64Sfixed64() map[int64]int64 {
	if x != nil {
		return x.Sfixed64Sfixed64
	}
	return nil
}

func (x *MapGalore) GetInt32Int32() map[int32]int32 {
	if x != nil {
		return x.Int32Int32
	}
	return nil
}

func (x *MapGalore) GetUint32Uint32() map[uint32]uint32 {
	if x != nil {
		return x.Uint32Uint32
	}
	return nil
}

func (x *MapGalore) GetFixed32Fixed32() map[uint32]uint32 {
	if x != nil {
		return x.Fixed32Fixed32
	}
	return nil
}

func (x *MapGalore) GetSint32Sint32() map[int32]int32 {
	if x != nil {
		return x.Sint32Sint32
	}
	return nil
}

func (x *MapGalore) GetSfixed32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.Sfixed32Sfixed32
	}
	return nil
}

func (x *MapGalore) GetStringstring() map[string]string {
	if x != nil {
		return x.Stringstring
	}
	return nil
}

func (x *MapGalore) GetBoolbool() map[bool]bool {
	if x != nil {
		return x.Boolbool
	}
	return nil
}

func (x *MapGalore) GetStringbytes() map[string][]byte {
	if x != nil {
		return x.Stringbytes
	}
	return nil
}

func (x *MapGalore) GetStringdouble() map[string]float64 {
	if x != nil {
		return x.Stringdouble
	}
	return nil
}

func (x *MapGalore) GetStringfloat() map[string]float32 {
	if x != nil {
		return x.Stringfloat
	}
	return nil
}

func (x *MapGalore) GetStringduration() map[string]*durationpb.Duration {
	if x != nil {
		return x.Stringduration
	}
	return nil
}

func (x *MapGalore) GetStringtimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.Stringtimestamp
	}
	return nil
}

var File_message_v1_message_proto protoreflect.FileDescriptor

var file_message_v1_message_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x53, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x45, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x2a,
	0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x21,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x22, 0xed, 0x08, 0x0a, 0x07, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x6f, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x6e,
	0x6f, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x4b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x5f, 0x6b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x70, 0x4b, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x75, 0x6e, 0x74,
	0x5f, 0x6b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x42, 0x6c, 0x75, 0x6e, 0x74, 0x4b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x74, 0x79,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x09, 0x64, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x09,
	0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x6e, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x37, 0x0a,
	0x0d, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2f,
	0x0a, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x73, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x79, 0x1a,
	0x53, 0x0a, 0x0e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xcc, 0x13, 0x0a, 0x09, 0x4d,
	0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x4b, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x51, 0x0a, 0x0e,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x4b, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x57, 0x0a, 0x10,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4b, 0x0a, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x4b, 0x0a, 0x0c,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x3f, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x48, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x62, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61,
	0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43,
	0x0a, 0x15, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x62, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x13, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x14, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3b, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x52, 0x54, 0x59, 0x4e,
	0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x52, 0x54, 0x59, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x42, 0xaf, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x64, 0x62, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_v1_message_proto_rawDescOnce sync.Once
	file_message_v1_message_proto_rawDescData = file_message_v1_message_proto_rawDesc
)

func file_message_v1_message_proto_rawDescGZIP() []byte {
	file_message_v1_message_proto_rawDescOnce.Do(func() {
		file_message_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_v1_message_proto_rawDescData)
	})
	return file_message_v1_message_proto_rawDescData
}

var file_message_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_message_v1_message_proto_goTypes = []interface{}{
	(Dirtyness)(0),                // 0: message.v1.Dirtyness
	(*Engine)(nil),                // 1: message.v1.Engine
	(*Car)(nil),                   // 2: message.v1.Car
	(*Appliance)(nil),             // 3: message.v1.Appliance
	(*Kitchen)(nil),               // 4: message.v1.Kitchen
	(*Empty)(nil),                 // 5: message.v1.Empty
	(*MapGalore)(nil),             // 6: message.v1.MapGalore
	nil,                           // 7: message.v1.Kitchen.FurnitureEntry
	nil,                           // 8: message.v1.Kitchen.CalendarEntry
	nil,                           // 9: message.v1.MapGalore.Int64int64Entry
	nil,                           // 10: message.v1.MapGalore.Uint64uint64Entry
	nil,                           // 11: message.v1.MapGalore.Fixed64fixed64Entry
	nil,                           // 12: message.v1.MapGalore.Sint64sint64Entry
	nil,                           // 13: message.v1.MapGalore.Sfixed64sfixed64Entry
	nil,                           // 14: message.v1.MapGalore.Int32int32Entry
	nil,                           // 15: message.v1.MapGalore.Uint32uint32Entry
	nil,                           // 16: message.v1.MapGalore.Fixed32fixed32Entry
	nil,                           // 17: message.v1.MapGalore.Sint32sint32Entry
	nil,                           // 18: message.v1.MapGalore.Sfixed32sfixed32Entry
	nil,                           // 19: message.v1.MapGalore.StringstringEntry
	nil,                           // 20: message.v1.MapGalore.BoolboolEntry
	nil,                           // 21: message.v1.MapGalore.StringbytesEntry
	nil,                           // 22: message.v1.MapGalore.StringdoubleEntry
	nil,                           // 23: message.v1.MapGalore.StringfloatEntry
	nil,                           // 24: message.v1.MapGalore.StringdurationEntry
	nil,                           // 25: message.v1.MapGalore.StringtimestampEntry
	(*durationpb.Duration)(nil),   // 26: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 27: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 28: google.protobuf.Any
}
var file_message_v1_message_proto_depIdxs = []int32{
	0,  // 0: message.v1.Engine.dirtyness:type_name -> message.v1.Dirtyness
	1,  // 1: message.v1.Car.engine:type_name -> message.v1.Engine
	0,  // 2: message.v1.Kitchen.dirtyness:type_name -> message.v1.Dirtyness
	7,  // 3: message.v1.Kitchen.furniture:type_name -> message.v1.Kitchen.FurnitureEntry
	8,  // 4: message.v1.Kitchen.calendar:type_name -> message.v1.Kitchen.CalendarEntry
	1,  // 5: message.v1.Kitchen.washer_engine:type_name -> message.v1.Engine
	4,  // 6: message.v1.Kitchen.extra_kitchen:type_name -> message.v1.Kitchen
	26, // 7: message.v1.Kitchen.timer:type_name -> google.protobuf.Duration
	27, // 8: message.v1.Kitchen.wall_time:type_name -> google.protobuf.Timestamp
	1,  // 9: message.v1.Kitchen.appliance_engines:type_name -> message.v1.Engine
	28, // 10: message.v1.Kitchen.some_any:type_name -> google.protobuf.Any
	9,  // 11: message.v1.MapGalore.int64int64:type_name -> message.v1.MapGalore.Int64int64Entry
	10, // 12: message.v1.MapGalore.uint64uint64:type_name -> message.v1.MapGalore.Uint64uint64Entry
	11, // 13: message.v1.MapGalore.fixed64fixed64:type_name -> message.v1.MapGalore.Fixed64fixed64Entry
	12, // 14: message.v1.MapGalore.sint64sint64:type_name -> message.v1.MapGalore.Sint64sint64Entry
	13, // 15: message.v1.MapGalore.sfixed64sfixed64:type_name -> message.v1.MapGalore.Sfixed64sfixed64Entry
	14, // 16: message.v1.MapGalore.int32int32:type_name -> message.v1.MapGalore.Int32int32Entry
	15, // 17: message.v1.MapGalore.uint32uint32:type_name -> message.v1.MapGalore.Uint32uint32Entry
	16, // 18: message.v1.MapGalore.fixed32fixed32:type_name -> message.v1.MapGalore.Fixed32fixed32Entry
	17, // 19: message.v1.MapGalore.sint32sint32:type_name -> message.v1.MapGalore.Sint32sint32Entry
	18, // 20: message.v1.MapGalore.sfixed32sfixed32:type_name -> message.v1.MapGalore.Sfixed32sfixed32Entry
	19, // 21: message.v1.MapGalore.stringstring:type_name -> message.v1.MapGalore.StringstringEntry
	20, // 22: message.v1.MapGalore.boolbool:type_name -> message.v1.MapGalore.BoolboolEntry
	21, // 23: message.v1.MapGalore.stringbytes:type_name -> message.v1.MapGalore.StringbytesEntry
	22, // 24: message.v1.MapGalore.stringdouble:type_name -> message.v1.MapGalore.StringdoubleEntry
	23, // 25: message.v1.MapGalore.stringfloat:type_name -> message.v1.MapGalore.StringfloatEntry
	24, // 26: message.v1.MapGalore.stringduration:type_name -> message.v1.MapGalore.StringdurationEntry
	25, // 27: message.v1.MapGalore.stringtimestamp:type_name -> message.v1.MapGalore.StringtimestampEntry
	3,  // 28: message.v1.Kitchen.FurnitureEntry.value:type_name -> message.v1.Appliance
	26, // 29: message.v1.MapGalore.StringdurationEntry.value:type_name -> google.protobuf.Duration
	27, // 30: message.v1.MapGalore.StringtimestampEntry.value:type_name -> google.protobuf.Timestamp
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_message_v1_message_proto_init() }
func file_message_v1_message_proto_init() {
	if File_message_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Engine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kitchen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_v1_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapGalore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_v1_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_v1_message_proto_goTypes,
		DependencyIndexes: file_message_v1_message_proto_depIdxs,
		EnumInfos:         file_message_v1_message_proto_enumTypes,
		MessageInfos:      file_message_v1_message_proto_msgTypes,
	}.Build()
	File_message_v1_message_proto = out.File
	file_message_v1_message_proto_rawDesc = nil
	file_message_v1_message_proto_goTypes = nil
	file_message_v1_message_proto_depIdxs = nil
}
