package generator

import (
	"fmt"
	"io"
	"path"
	"runtime/debug"

	. "github.com/dave/jennifer/jen"
	"go.uber.org/zap"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	attributevalues = "github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	dynamodbtypes   = "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// Target facilitates generation from a single protobuf file
type Target struct {
	src    *protogen.File
	logs   *zap.Logger
	idents struct {
		ddb       string
		marshal   Code
		unmarshal Code
		encopt    Code
		decopt    Code
	}
}

// returns true as the identifier is part of the package we're generating for
func (tg *Target) isSamePkgIdent(ident protogen.GoIdent) bool {
	return ident.GoImportPath == tg.src.GoImportPath
}

// fieldGoType turns a field protoreflect kind into a go type
func (tg *Target) fieldGoType(f *protogen.Field) *Statement {
	if f.Message != nil {
		// if the message is from the same package path as we're generating for, assume we refer
		// to it without fullq qualifier
		if tg.isSamePkgIdent(f.Message.GoIdent) {
			return Id(f.Message.GoIdent.GoName)
		}

		// else refer to it with qualifier
		return Qual(string(f.Message.GoIdent.GoImportPath), f.Message.GoIdent.GoName)
	}

	switch f.Desc.Kind() {
	case protoreflect.StringKind, protoreflect.BoolKind,
		protoreflect.Int64Kind, protoreflect.Uint64Kind:
		return Id(f.Desc.Kind().String())
	case protoreflect.BytesKind:
		return Id("[]byte")
	case protoreflect.Fixed64Kind:
		return Id("uint64")
	case protoreflect.Sint64Kind:
		return Id("int64")
	case protoreflect.Sfixed64Kind:
		return Id("int64")
	case protoreflect.Int32Kind, protoreflect.Uint32Kind:
		return Id(f.Desc.Kind().String())
	case protoreflect.Fixed32Kind:
		return Id("uint32")
	case protoreflect.Sint32Kind:
		return Id("int32")
	case protoreflect.Sfixed32Kind:
		return Id("int32")
	case protoreflect.DoubleKind:
		return Id("float64")
	case protoreflect.FloatKind:
		return Id("float32")
	default:
		panic("unsupported field type: " + f.Desc.Kind().String())
	}
}

// fieldZeroValue determines the literal that is asserted against to determine if
// the field should be added to the result attribute map
func (tg *Target) fieldZeroValue(f *protogen.Field) *Statement {
	if f.Message != nil ||
		f.Desc.IsList() ||
		f.Desc.HasPresence() {
		return Nil()
	}

	switch f.Desc.Kind() {
	case protoreflect.StringKind:
		return Lit("")
	case protoreflect.BoolKind:
		return Lit(false)
	case protoreflect.Int64Kind,
		protoreflect.Uint64Kind,
		protoreflect.Fixed64Kind,
		protoreflect.Sint64Kind,
		protoreflect.Sfixed64Kind,
		protoreflect.Int32Kind, protoreflect.Uint32Kind,
		protoreflect.Fixed32Kind,
		protoreflect.Sint32Kind,
		protoreflect.Sfixed32Kind,
		protoreflect.DoubleKind,
		protoreflect.FloatKind:
		return Lit(0)
	case protoreflect.BytesKind:
		return Nil()
	case protoreflect.EnumKind:
		return Lit(0)
	default:
		panic("unsupported zero value: " + f.Desc.Kind().String())
	}
}

// Generate peforms the actual code generation
func (tg *Target) Generate(w io.Writer) error {
	f := NewFile(string(tg.src.GoPackageName))
	f.HeaderComment("Code generated by protoc-gen-dynamodb. DO NOT EDIT.")

	bi, ok := debug.ReadBuildInfo()
	if !ok {
		return fmt.Errorf("failed to read build info: binary not build with modules support")
	}

	// setup qualifiers to the shared package
	tg.idents.ddb = path.Join(bi.Path, "ddb")
	tg.idents.marshal, tg.idents.unmarshal, tg.idents.encopt, tg.idents.decopt =
		Qual(tg.idents.ddb, "MarshalDynamoMessage"),
		Qual(tg.idents.ddb, "UnmarshalDynamoMessage"),
		Qual(tg.idents.ddb, "EncodingOption"),
		Qual(tg.idents.ddb, "DecodingOption")

	// generate per message marshal/unmarshal code
	for _, m := range tg.src.Messages {

		// generate pk/sk methods
		if err := tg.genMessageKeying(f, m); err != nil {
			return fmt.Errorf("failed to generate keying: %w", err)
		}

		// generate the marshal method
		if err := tg.genMessageMarshal(f, m); err != nil {
			return fmt.Errorf("failed to generate marshal: %w", err)
		}

		// generate the unmarshal method
		if err := tg.genMessageUnmarshal(f, m); err != nil {
			return fmt.Errorf("failed to generate unmarshal: %w", err)
		}
	}

	return f.Render(w)
}
