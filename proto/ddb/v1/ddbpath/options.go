// Code generated by protoc-gen-dynamodb. DO NOT EDIT.

// Package ddbv1ddbpath holds generated code for working with Dynamo document paths
package ddbv1ddbpath

import (
	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	ddbpath "github.com/crewlinker/protoc-gen-dynamodb/ddb/ddbpath"
	"reflect"
)

// LsiOptionsPath allows for constructing type-safe expression names
type LsiOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p LsiOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) LsiOptionsPath {
	p.NameBuilder = n
	return p
}

// Name appends the path being build
func (p LsiOptionsPath) Name() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Sk appends the path being build
func (p LsiOptionsPath) Sk() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}
func init() {
	ddbpath.Register(LsiOptionsPath{}, map[string]ddbpath.FieldInfo{
		"1": {Kind: ddbpath.FieldKindSingle},
		"3": {Kind: ddbpath.FieldKindSingle},
	})
}

// GsiOptionsPath allows for constructing type-safe expression names
type GsiOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p GsiOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) GsiOptionsPath {
	p.NameBuilder = n
	return p
}

// Name appends the path being build
func (p GsiOptionsPath) Name() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Pk appends the path being build
func (p GsiOptionsPath) Pk() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// Sk appends the path being build
func (p GsiOptionsPath) Sk() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}
func init() {
	ddbpath.Register(GsiOptionsPath{}, map[string]ddbpath.FieldInfo{
		"1": {Kind: ddbpath.FieldKindSingle},
		"2": {Kind: ddbpath.FieldKindSingle},
		"3": {Kind: ddbpath.FieldKindSingle},
	})
}

// GsiOptionsV2Path allows for constructing type-safe expression names
type GsiOptionsV2Path struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p GsiOptionsV2Path) WithDynamoNameBuilder(n expression.NameBuilder) GsiOptionsV2Path {
	p.NameBuilder = n
	return p
}

// Name appends the path being build
func (p GsiOptionsV2Path) Name() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Pk appends the path being build
func (p GsiOptionsV2Path) Pk() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// Sk appends the path being build
func (p GsiOptionsV2Path) Sk() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}
func init() {
	ddbpath.Register(GsiOptionsV2Path{}, map[string]ddbpath.FieldInfo{
		"1": {Kind: ddbpath.FieldKindSingle},
		"2": {Kind: ddbpath.FieldKindSingle},
		"3": {Kind: ddbpath.FieldKindSingle},
	})
}

// LsiOptionsV2Path allows for constructing type-safe expression names
type LsiOptionsV2Path struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p LsiOptionsV2Path) WithDynamoNameBuilder(n expression.NameBuilder) LsiOptionsV2Path {
	p.NameBuilder = n
	return p
}

// Name appends the path being build
func (p LsiOptionsV2Path) Name() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Sk appends the path being build
func (p LsiOptionsV2Path) Sk() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}
func init() {
	ddbpath.Register(LsiOptionsV2Path{}, map[string]ddbpath.FieldInfo{
		"1": {Kind: ddbpath.FieldKindSingle},
		"3": {Kind: ddbpath.FieldKindSingle},
	})
}

// FieldOptionsPath allows for constructing type-safe expression names
type FieldOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p FieldOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) FieldOptionsPath {
	p.NameBuilder = n
	return p
}

// Name appends the path being build
func (p FieldOptionsPath) Name() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Pk appends the path being build
func (p FieldOptionsPath) Pk() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// Sk appends the path being build
func (p FieldOptionsPath) Sk() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}

// Omit appends the path being build
func (p FieldOptionsPath) Omit() expression.NameBuilder {
	return p.AppendName(expression.Name("4"))
}

// Set appends the path being build
func (p FieldOptionsPath) Set() expression.NameBuilder {
	return p.AppendName(expression.Name("5"))
}

// Embed appends the path being build
func (p FieldOptionsPath) Embed() expression.NameBuilder {
	return p.AppendName(expression.Name("6"))
}

// Lsi returns 'p' appended with the attribute while allow indexing a nested message
func (p FieldOptionsPath) Lsi() ddbpath.ItemList[LsiOptionsPath] {
	return ddbpath.ItemList[LsiOptionsPath]{NameBuilder: p.AppendName(expression.Name("8"))}
}

// Gsi returns 'p' appended with the attribute while allow indexing a nested message
func (p FieldOptionsPath) Gsi() ddbpath.ItemList[GsiOptionsPath] {
	return ddbpath.ItemList[GsiOptionsPath]{NameBuilder: p.AppendName(expression.Name("9"))}
}
func init() {
	ddbpath.Register(FieldOptionsPath{}, map[string]ddbpath.FieldInfo{
		"1": {Kind: ddbpath.FieldKindSingle},
		"2": {Kind: ddbpath.FieldKindSingle},
		"3": {Kind: ddbpath.FieldKindSingle},
		"4": {Kind: ddbpath.FieldKindSingle},
		"5": {Kind: ddbpath.FieldKindSingle},
		"6": {Kind: ddbpath.FieldKindSingle},
		"8": {
			Kind:    ddbpath.FieldKindList,
			Message: reflect.TypeOf(LsiOptionsPath{}),
		},
		"9": {
			Kind:    ddbpath.FieldKindList,
			Message: reflect.TypeOf(GsiOptionsPath{}),
		},
	})
}

// MessageOptionsPath allows for constructing type-safe expression names
type MessageOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p MessageOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) MessageOptionsPath {
	p.NameBuilder = n
	return p
}

// Table returns 'p' appended with the attribute name and allow indexing
func (p MessageOptionsPath) Table() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("1"))}
}

// Gsi returns 'p' appended with the attribute while allow indexing a nested message
func (p MessageOptionsPath) Gsi() ddbpath.ItemList[GsiOptionsV2Path] {
	return ddbpath.ItemList[GsiOptionsV2Path]{NameBuilder: p.AppendName(expression.Name("2"))}
}

// Lsi returns 'p' appended with the attribute while allow indexing a nested message
func (p MessageOptionsPath) Lsi() ddbpath.ItemList[LsiOptionsV2Path] {
	return ddbpath.ItemList[LsiOptionsV2Path]{NameBuilder: p.AppendName(expression.Name("3"))}
}
func init() {
	ddbpath.Register(MessageOptionsPath{}, map[string]ddbpath.FieldInfo{
		"1": {Kind: ddbpath.FieldKindList},
		"2": {
			Kind:    ddbpath.FieldKindList,
			Message: reflect.TypeOf(GsiOptionsV2Path{}),
		},
		"3": {
			Kind:    ddbpath.FieldKindList,
			Message: reflect.TypeOf(LsiOptionsV2Path{}),
		},
	})
}

// TableGsiOptionsPath allows for constructing type-safe expression names
type TableGsiOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p TableGsiOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) TableGsiOptionsPath {
	p.NameBuilder = n
	return p
}

// Name appends the path being build
func (p TableGsiOptionsPath) Name() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Pk appends the path being build
func (p TableGsiOptionsPath) Pk() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// Sk appends the path being build
func (p TableGsiOptionsPath) Sk() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}
func init() {
	ddbpath.Register(TableGsiOptionsPath{}, map[string]ddbpath.FieldInfo{
		"1": {Kind: ddbpath.FieldKindSingle},
		"2": {Kind: ddbpath.FieldKindSingle},
		"3": {Kind: ddbpath.FieldKindSingle},
	})
}

// TableOptionsPath allows for constructing type-safe expression names
type TableOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p TableOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) TableOptionsPath {
	p.NameBuilder = n
	return p
}

// Pk appends the path being build
func (p TableOptionsPath) Pk() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// Sk appends the path being build
func (p TableOptionsPath) Sk() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}

// Gsi returns 'p' appended with the attribute while allow indexing a nested message
func (p TableOptionsPath) Gsi() ddbpath.ItemList[TableGsiOptionsPath] {
	return ddbpath.ItemList[TableGsiOptionsPath]{NameBuilder: p.AppendName(expression.Name("10"))}
}
func init() {
	ddbpath.Register(TableOptionsPath{}, map[string]ddbpath.FieldInfo{
		"10": {
			Kind:    ddbpath.FieldKindList,
			Message: reflect.TypeOf(TableGsiOptionsPath{}),
		},
		"2": {Kind: ddbpath.FieldKindSingle},
		"3": {Kind: ddbpath.FieldKindSingle},
	})
}

// AttributeOptionsPath allows for constructing type-safe expression names
type AttributeOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p AttributeOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) AttributeOptionsPath {
	p.NameBuilder = n
	return p
}
func init() {
	ddbpath.Register(AttributeOptionsPath{}, map[string]ddbpath.FieldInfo{})
}

// EntityOptionsPath allows for constructing type-safe expression names
type EntityOptionsPath struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p EntityOptionsPath) WithDynamoNameBuilder(n expression.NameBuilder) EntityOptionsPath {
	p.NameBuilder = n
	return p
}

// TypeAttr appends the path being build
func (p EntityOptionsPath) TypeAttr() expression.NameBuilder {
	return p.AppendName(expression.Name("4"))
}
func init() {
	ddbpath.Register(EntityOptionsPath{}, map[string]ddbpath.FieldInfo{"4": {Kind: ddbpath.FieldKindSingle}})
}
