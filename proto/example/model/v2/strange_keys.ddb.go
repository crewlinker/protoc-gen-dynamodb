// Code generated by protoc-gen-dynamodb. DO NOT EDIT.

package modelv2

import (
	"fmt"
	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	ddb "github.com/crewlinker/protoc-gen-dynamodb/ddb"
	ddbtable "github.com/crewlinker/protoc-gen-dynamodb/ddb/ddbtable"
	v1 "github.com/crewlinker/protoc-gen-dynamodb/proto/ddb/v1"
)

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *Room) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.Number != 0 {
		m["1"], err = ddb.Marshal(x.GetNumber(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Number': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *Room) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.Number, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Number': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *StrangeKeys) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.Hash != nil {
		m["23"], err = ddb.Marshal(x.GetHash(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Hash': %w", err)
		}
	}
	if x.Range != 0 {
		m["1"], err = ddb.Marshal(x.GetRange(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Range': %w", err)
		}
	}
	if x.Kind != 0 {
		m["300"], err = ddb.Marshal(x.GetKind(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Kind': %w", err)
		}
	}
	if x.Gsi1Pk != "" {
		m["34"], err = ddb.Marshal(x.GetGsi1Pk(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Gsi1Pk': %w", err)
		}
	}
	if onev, ok := x.Entity.(*StrangeKeys_Room); ok && onev != nil {
		m400, err := ddb.MarshalMessage(x.GetRoom(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Room': %w", err)
		}
		m["400"] = m400
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *StrangeKeys) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["23"], &x.Hash, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Hash': %w", err)
	}
	err = ddb.Unmarshal(m["1"], &x.Range, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Range': %w", err)
	}
	err = ddb.Unmarshal(m["300"], &x.Kind, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Kind': %w", err)
	}
	err = ddb.Unmarshal(m["34"], &x.Gsi1Pk, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Gsi1Pk': %w", err)
	}
	if m["400"] != nil {
		var mo StrangeKeys_Room
		mo.Room = new(Room)
		err = ddb.UnmarshalMessage(m["400"], mo.Room, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'Room': %w", err)
		}
		x.Entity = &mo
	}
	return nil
}

// StrangeKeysKeys is populated by a key mapper to construct index values
type StrangeKeysKeys struct {
	Pk       []byte
	Sk       int64
	ByKindPk *string
}

// StrangeKeysKeyMapper interface can be implemented to customize how index attributes are build
type StrangeKeysKeyMapper interface {
	MapRoom(*Room) (StrangeKeysKeys, error)
}

// FromDynamoEntity propulates the table message from an entity message
func (x *StrangeKeys) FromDynamoEntity(e isStrangeKeys_Entity, m StrangeKeysKeyMapper) (err error) {
	var keys StrangeKeysKeys
	switch et := e.(type) {
	default:
		return fmt.Errorf("unsupported entity: %T", et)
	case *StrangeKeys_Room:
		x.Kind = EntityKind_ENTITY_KIND_ROOM
		x.Entity = et
		keys, err = m.MapRoom(et.Room)
	}
	if err != nil {
		return fmt.Errorf("failed to map keys: %w", err)
	}
	x.Hash = keys.Pk
	x.Range = keys.Sk
	if keys.ByKindPk != nil {
		x.Gsi1Pk = *keys.ByKindPk
	}
	return
}

// StrangeKeysTableDefinition can be used to register the table in the ddbtable registry
var StrangeKeysTableDefinition = ddbtable.Table{
	EntityType: &ddbtable.Attribute{
		Name: "300",
		Type: expression.String,
	},
	GlobalIndexes: []*ddbtable.GlobalIndex{{
		Name: "by_kind",
		PartitionKey: &ddbtable.Attribute{
			Name: "34",
			Type: expression.String,
		},
	}},
	Name: "strange_keys",
	PartitionKey: &ddbtable.Attribute{
		Name: "23",
		Type: expression.Binary,
	},
	SortKey: &ddbtable.Attribute{
		Name: "1",
		Type: expression.Number,
	},
}

// register table in the default registry
func init() {
	ddbtable.Register(&StrangeKeysTableDefinition)
}
