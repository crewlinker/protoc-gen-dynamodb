// Code generated by protoc-gen-dynamodb. DO NOT EDIT.

package modelv2

import (
	"fmt"
	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	ddb "github.com/crewlinker/protoc-gen-dynamodb/ddb"
	ddbtable "github.com/crewlinker/protoc-gen-dynamodb/ddb/ddbtable"
	v1 "github.com/crewlinker/protoc-gen-dynamodb/proto/ddb/v1"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *Flight) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.Number != 0 {
		m["1"], err = ddb.Marshal(x.GetNumber(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Number': %w", err)
		}
	}
	if x.DepatureAt != nil {
		m2, err := ddb.MarshalMessage(x.GetDepatureAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'DepatureAt': %w", err)
		}
		m["2"] = m2
	}
	if x.ArrivalAt != nil {
		m3, err := ddb.MarshalMessage(x.GetArrivalAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'ArrivalAt': %w", err)
		}
		m["3"] = m3
	}
	if x.Origin != 0 {
		m["4"], err = ddb.Marshal(x.GetOrigin(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Origin': %w", err)
		}
	}
	if x.Destination != 0 {
		m["5"], err = ddb.Marshal(x.GetDestination(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Destination': %w", err)
		}
	}
	if x.Class != 0 {
		m["6"], err = ddb.Marshal(x.GetClass(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Class': %w", err)
		}
	}
	if x.IsSegment != false {
		m["7"], err = ddb.Marshal(x.GetIsSegment(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'IsSegment': %w", err)
		}
	}
	if x.SegmentId != 0 {
		m["8"], err = ddb.Marshal(x.GetSegmentId(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'SegmentId': %w", err)
		}
	}
	if x.Segments != "" {
		m["9"], err = ddb.Marshal(x.GetSegments(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Segments': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *Flight) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.Number, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Number': %w", err)
	}
	if m["2"] != nil {
		x.DepatureAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["2"], x.DepatureAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'DepatureAt': %w", err)
		}
	}
	if m["3"] != nil {
		x.ArrivalAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["3"], x.ArrivalAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'ArrivalAt': %w", err)
		}
	}
	err = ddb.Unmarshal(m["4"], &x.Origin, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Origin': %w", err)
	}
	err = ddb.Unmarshal(m["5"], &x.Destination, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Destination': %w", err)
	}
	err = ddb.Unmarshal(m["6"], &x.Class, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Class': %w", err)
	}
	err = ddb.Unmarshal(m["7"], &x.IsSegment, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'IsSegment': %w", err)
	}
	err = ddb.Unmarshal(m["8"], &x.SegmentId, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'SegmentId': %w", err)
	}
	err = ddb.Unmarshal(m["9"], &x.Segments, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Segments': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *Fare) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.StartAt != nil {
		m1, err := ddb.MarshalMessage(x.GetStartAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'StartAt': %w", err)
		}
		m["1"] = m1
	}
	if x.EndAt != nil {
		m2, err := ddb.MarshalMessage(x.GetEndAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'EndAt': %w", err)
		}
		m["2"] = m2
	}
	if x.Origin != 0 {
		m["3"], err = ddb.Marshal(x.GetOrigin(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Origin': %w", err)
		}
	}
	if x.Destination != 0 {
		m["4"], err = ddb.Marshal(x.GetDestination(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Destination': %w", err)
		}
	}
	if x.Class != 0 {
		m["5"], err = ddb.Marshal(x.GetClass(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Class': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *Fare) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	if m["1"] != nil {
		x.StartAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["1"], x.StartAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'StartAt': %w", err)
		}
	}
	if m["2"] != nil {
		x.EndAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["2"], x.EndAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'EndAt': %w", err)
		}
	}
	err = ddb.Unmarshal(m["3"], &x.Origin, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Origin': %w", err)
	}
	err = ddb.Unmarshal(m["4"], &x.Destination, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Destination': %w", err)
	}
	err = ddb.Unmarshal(m["5"], &x.Class, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Class': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *Assignment) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.Number != 0 {
		m["1"], err = ddb.Marshal(x.GetNumber(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Number': %w", err)
		}
	}
	if x.FlightNumber != 0 {
		m["2"], err = ddb.Marshal(x.GetFlightNumber(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'FlightNumber': %w", err)
		}
	}
	if x.SegmentId != 0 {
		m["3"], err = ddb.Marshal(x.GetSegmentId(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'SegmentId': %w", err)
		}
	}
	if x.Seat != "" {
		m["4"], err = ddb.Marshal(x.GetSeat(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Seat': %w", err)
		}
	}
	if x.DepartureAt != nil {
		m5, err := ddb.MarshalMessage(x.GetDepartureAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'DepartureAt': %w", err)
		}
		m["5"] = m5
	}
	if x.ArrivalAt != nil {
		m6, err := ddb.MarshalMessage(x.GetArrivalAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'ArrivalAt': %w", err)
		}
		m["6"] = m6
	}
	if x.Origin != 0 {
		m["7"], err = ddb.Marshal(x.GetOrigin(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Origin': %w", err)
		}
	}
	if x.Destination != 0 {
		m["8"], err = ddb.Marshal(x.GetDestination(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Destination': %w", err)
		}
	}
	if len(x.SpecialServiceRequests) != 0 {
		m["9"], err = ddb.Marshal(x.GetSpecialServiceRequests(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'SpecialServiceRequests': %w", err)
		}
	}
	if x.FirstName != "" {
		m["10"], err = ddb.Marshal(x.GetFirstName(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'FirstName': %w", err)
		}
	}
	if x.LastName != "" {
		m["11"], err = ddb.Marshal(x.GetLastName(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'LastName': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *Assignment) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.Number, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Number': %w", err)
	}
	err = ddb.Unmarshal(m["2"], &x.FlightNumber, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'FlightNumber': %w", err)
	}
	err = ddb.Unmarshal(m["3"], &x.SegmentId, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'SegmentId': %w", err)
	}
	err = ddb.Unmarshal(m["4"], &x.Seat, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Seat': %w", err)
	}
	if m["5"] != nil {
		x.DepartureAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["5"], x.DepartureAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'DepartureAt': %w", err)
		}
	}
	if m["6"] != nil {
		x.ArrivalAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["6"], x.ArrivalAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'ArrivalAt': %w", err)
		}
	}
	err = ddb.Unmarshal(m["7"], &x.Origin, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Origin': %w", err)
	}
	err = ddb.Unmarshal(m["8"], &x.Destination, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Destination': %w", err)
	}
	err = ddb.Unmarshal(m["9"], &x.SpecialServiceRequests, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'SpecialServiceRequests': %w", err)
	}
	err = ddb.Unmarshal(m["10"], &x.FirstName, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'FirstName': %w", err)
	}
	err = ddb.Unmarshal(m["11"], &x.LastName, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'LastName': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *Booking) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.FlightNumber != 0 {
		m["1"], err = ddb.Marshal(x.GetFlightNumber(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'FlightNumber': %w", err)
		}
	}
	if x.DepartureAt != nil {
		m2, err := ddb.MarshalMessage(x.GetDepartureAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'DepartureAt': %w", err)
		}
		m["2"] = m2
	}
	if x.ArrivalAt != nil {
		m3, err := ddb.MarshalMessage(x.GetArrivalAt(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'ArrivalAt': %w", err)
		}
		m["3"] = m3
	}
	if x.Segments != 0 {
		m["4"], err = ddb.Marshal(x.GetSegments(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Segments': %w", err)
		}
	}
	if x.Origin != 0 {
		m["5"], err = ddb.Marshal(x.GetOrigin(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Origin': %w", err)
		}
	}
	if x.Destination != 0 {
		m["6"], err = ddb.Marshal(x.GetDestination(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Destination': %w", err)
		}
	}
	if x.FirstName != "" {
		m["10"], err = ddb.Marshal(x.GetFirstName(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'FirstName': %w", err)
		}
	}
	if x.LastName != "" {
		m["11"], err = ddb.Marshal(x.GetLastName(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'LastName': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *Booking) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.FlightNumber, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'FlightNumber': %w", err)
	}
	if m["2"] != nil {
		x.DepartureAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["2"], x.DepartureAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'DepartureAt': %w", err)
		}
	}
	if m["3"] != nil {
		x.ArrivalAt = new(timestamppb.Timestamp)
		err = ddb.UnmarshalMessage(m["3"], x.ArrivalAt, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'ArrivalAt': %w", err)
		}
	}
	err = ddb.Unmarshal(m["4"], &x.Segments, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Segments': %w", err)
	}
	err = ddb.Unmarshal(m["5"], &x.Origin, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Origin': %w", err)
	}
	err = ddb.Unmarshal(m["6"], &x.Destination, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Destination': %w", err)
	}
	err = ddb.Unmarshal(m["10"], &x.FirstName, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'FirstName': %w", err)
	}
	err = ddb.Unmarshal(m["11"], &x.LastName, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'LastName': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *FlightFares) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.Pk != "" {
		m["1"], err = ddb.Marshal(x.GetPk(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Pk': %w", err)
		}
	}
	if x.Sk != "" {
		m["2"], err = ddb.Marshal(x.GetSk(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Sk': %w", err)
		}
	}
	if x.Type != 0 {
		m["3"], err = ddb.Marshal(x.GetType(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Type': %w", err)
		}
	}
	if x.Gsi1Pk != "" {
		m["4"], err = ddb.Marshal(x.GetGsi1Pk(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Gsi1Pk': %w", err)
		}
	}
	if x.Gsi1Sk != "" {
		m["5"], err = ddb.Marshal(x.GetGsi1Sk(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Gsi1Sk': %w", err)
		}
	}
	if x.Gsi2Pk != "" {
		m["6"], err = ddb.Marshal(x.GetGsi2Pk(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Gsi2Pk': %w", err)
		}
	}
	if x.Gsi2Sk != "" {
		m["7"], err = ddb.Marshal(x.GetGsi2Sk(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Gsi2Sk': %w", err)
		}
	}
	if onev, ok := x.Entity.(*FlightFares_Flight); ok && onev != nil {
		m100, err := ddb.MarshalMessage(x.GetFlight(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Flight': %w", err)
		}
		m["100"] = m100
	}
	if onev, ok := x.Entity.(*FlightFares_Fare); ok && onev != nil {
		m101, err := ddb.MarshalMessage(x.GetFare(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Fare': %w", err)
		}
		m["101"] = m101
	}
	if onev, ok := x.Entity.(*FlightFares_Assignment); ok && onev != nil {
		m102, err := ddb.MarshalMessage(x.GetAssignment(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Assignment': %w", err)
		}
		m["102"] = m102
	}
	if onev, ok := x.Entity.(*FlightFares_Booking); ok && onev != nil {
		m103, err := ddb.MarshalMessage(x.GetBooking(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Booking': %w", err)
		}
		m["103"] = m103
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *FlightFares) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.Pk, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Pk': %w", err)
	}
	err = ddb.Unmarshal(m["2"], &x.Sk, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Sk': %w", err)
	}
	err = ddb.Unmarshal(m["3"], &x.Type, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Type': %w", err)
	}
	err = ddb.Unmarshal(m["4"], &x.Gsi1Pk, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Gsi1Pk': %w", err)
	}
	err = ddb.Unmarshal(m["5"], &x.Gsi1Sk, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Gsi1Sk': %w", err)
	}
	err = ddb.Unmarshal(m["6"], &x.Gsi2Pk, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Gsi2Pk': %w", err)
	}
	err = ddb.Unmarshal(m["7"], &x.Gsi2Sk, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Gsi2Sk': %w", err)
	}
	if m["100"] != nil {
		var mo FlightFares_Flight
		mo.Flight = new(Flight)
		err = ddb.UnmarshalMessage(m["100"], mo.Flight, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'Flight': %w", err)
		}
		x.Entity = &mo
	}
	if m["101"] != nil {
		var mo FlightFares_Fare
		mo.Fare = new(Fare)
		err = ddb.UnmarshalMessage(m["101"], mo.Fare, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'Fare': %w", err)
		}
		x.Entity = &mo
	}
	if m["102"] != nil {
		var mo FlightFares_Assignment
		mo.Assignment = new(Assignment)
		err = ddb.UnmarshalMessage(m["102"], mo.Assignment, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'Assignment': %w", err)
		}
		x.Entity = &mo
	}
	if m["103"] != nil {
		var mo FlightFares_Booking
		mo.Booking = new(Booking)
		err = ddb.UnmarshalMessage(m["103"], mo.Booking, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'Booking': %w", err)
		}
		x.Entity = &mo
	}
	return nil
}

// FlightFaresKeys is populated by a key mapper to construct index values
type FlightFaresKeys struct {
	Pk     string
	Sk     string
	Gsi1Pk *string
	Gsi1Sk *string
	Gsi2Pk *string
	Gsi2Sk *string
}

// FlightFaresKeyMapper interface can be implemented to customize how index attributes are build
type FlightFaresKeyMapper interface {
	MapFlight(*Flight) (FlightFaresKeys, error)
	MapFare(*Fare) (FlightFaresKeys, error)
	MapAssignment(*Assignment) (FlightFaresKeys, error)
	MapBooking(*Booking) (FlightFaresKeys, error)
}

// FromDynamoEntity propulates the table message from an entity message
func (x *FlightFares) FromDynamoEntity(e isFlightFares_Entity, m FlightFaresKeyMapper) (err error) {
	var keys FlightFaresKeys
	switch et := e.(type) {
	default:
		return fmt.Errorf("unsupported entity: %T", et)
	case *FlightFares_Flight:
		x.Type = FlightFareType_FLIGHT_FARE_TYPE_FLIGHT
		x.Entity = et
		keys, err = m.MapFlight(et.Flight)
	case *FlightFares_Fare:
		x.Type = FlightFareType_FLIGHT_FARE_TYPE_FARE
		x.Entity = et
		keys, err = m.MapFare(et.Fare)
	case *FlightFares_Assignment:
		x.Type = FlightFareType_FLIGHT_FARE_TYPE_ASSIGNMENT
		x.Entity = et
		keys, err = m.MapAssignment(et.Assignment)
	case *FlightFares_Booking:
		x.Type = FlightFareType_FLIGHT_FARE_TYPE_BOOKING
		x.Entity = et
		keys, err = m.MapBooking(et.Booking)
	}
	if err != nil {
		return fmt.Errorf("failed to map keys: %w", err)
	}
	x.Pk = keys.Pk
	x.Sk = keys.Sk
	if keys.Gsi1Pk != nil {
		x.Gsi1Pk = *keys.Gsi1Pk
	}
	if keys.Gsi1Sk != nil {
		x.Gsi1Sk = *keys.Gsi1Sk
	}
	if keys.Gsi2Pk != nil {
		x.Gsi2Pk = *keys.Gsi2Pk
	}
	if keys.Gsi2Sk != nil {
		x.Gsi2Sk = *keys.Gsi2Sk
	}
	return
}

// FlightFaresTableDefinition can be used to register the table in the ddbtable registry
var FlightFaresTableDefinition = ddbtable.Table{
	EntityType: &ddbtable.Attribute{
		Name: "3",
		Type: expression.String,
	},
	GlobalIndexes: []*ddbtable.GlobalIndex{{
		Name: "gsi1",
		PartitionKey: &ddbtable.Attribute{
			Name: "4",
			Type: expression.String,
		},
		SortKey: &ddbtable.Attribute{
			Name: "5",
			Type: expression.String,
		},
	}, {
		Name: "gsi2",
		PartitionKey: &ddbtable.Attribute{
			Name: "6",
			Type: expression.String,
		},
		SortKey: &ddbtable.Attribute{
			Name: "7",
			Type: expression.String,
		},
	}},
	Name: "flight_fares",
	PartitionKey: &ddbtable.Attribute{
		Name: "1",
		Type: expression.String,
	},
	SortKey: &ddbtable.Attribute{
		Name: "2",
		Type: expression.String,
	},
}

// register table in the default registry
func init() {
	ddbtable.Register(&FlightFaresTableDefinition)
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *FaresFromToRequest) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.From != 0 {
		m["1"], err = ddb.Marshal(x.GetFrom(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'From': %w", err)
		}
	}
	if x.To != 0 {
		m["2"], err = ddb.Marshal(x.GetTo(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'To': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *FaresFromToRequest) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.From, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'From': %w", err)
	}
	err = ddb.Unmarshal(m["2"], &x.To, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'To': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *FaresFromToResponse) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if len(x.Fares) != 0 {
		m["1"], err = ddb.MarshalRepeatedMessage(x.Fares, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal repeated message field 'Fares': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *FaresFromToResponse) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	if m["1"] != nil {
		x.Fares, err = ddb.UnmarshalRepeatedMessage[Fare](m["1"], ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal repeated message field 'Fares': %w", err)
		}
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *FlightsToFromInYearRequest) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.To != 0 {
		m["1"], err = ddb.Marshal(x.GetTo(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'To': %w", err)
		}
	}
	if x.From != 0 {
		m["2"], err = ddb.Marshal(x.GetFrom(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'From': %w", err)
		}
	}
	if x.Year != 0 {
		m["3"], err = ddb.Marshal(x.GetYear(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Year': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *FlightsToFromInYearRequest) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.To, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'To': %w", err)
	}
	err = ddb.Unmarshal(m["2"], &x.From, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'From': %w", err)
	}
	err = ddb.Unmarshal(m["3"], &x.Year, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Year': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *FlightsToFromInYearResponse) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if len(x.Flights) != 0 {
		m["1"], err = ddb.MarshalRepeatedMessage(x.Flights, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal repeated message field 'Flights': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *FlightsToFromInYearResponse) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	if m["1"] != nil {
		x.Flights, err = ddb.UnmarshalRepeatedMessage[Flight](m["1"], ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal repeated message field 'Flights': %w", err)
		}
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *PassengerBookingsInYearRequest) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.FirstName != "" {
		m["1"], err = ddb.Marshal(x.GetFirstName(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'FirstName': %w", err)
		}
	}
	if x.LastName != "" {
		m["2"], err = ddb.Marshal(x.GetLastName(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'LastName': %w", err)
		}
	}
	if x.Year != 0 {
		m["3"], err = ddb.Marshal(x.GetYear(), ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'Year': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *PassengerBookingsInYearRequest) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	err = ddb.Unmarshal(m["1"], &x.FirstName, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'FirstName': %w", err)
	}
	err = ddb.Unmarshal(m["2"], &x.LastName, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'LastName': %w", err)
	}
	err = ddb.Unmarshal(m["3"], &x.Year, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
	if err != nil {
		return fmt.Errorf("failed to unmarshal field 'Year': %w", err)
	}
	return nil
}

// MarshalDynamoItem marshals data into a dynamodb attribute map
func (x *PassengerBookingsInYearResponse) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if len(x.Bookings) != 0 {
		m["1"], err = ddb.MarshalRepeatedMessage(x.Bookings, ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return nil, fmt.Errorf("failed to marshal repeated message field 'Bookings': %w", err)
		}
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *PassengerBookingsInYearResponse) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	if m["1"] != nil {
		x.Bookings, err = ddb.UnmarshalRepeatedMessage[Booking](m["1"], ddb.Embed(v1.Encoding_ENCODING_DYNAMO))
		if err != nil {
			return fmt.Errorf("failed to unmarshal repeated message field 'Bookings': %w", err)
		}
	}
	return nil
}
