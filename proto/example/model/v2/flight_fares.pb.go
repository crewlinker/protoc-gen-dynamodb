// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: example/model/v2/flight_fares.proto

package modelv2

import (
	_ "github.com/crewlinker/protoc-gen-dynamodb/proto/ddb/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// types in our flight fares type our single table design
type FlightFareType int32

const (
	// value when type is unspecified
	FlightFareType_FLIGHT_FARE_TYPE_UNSPECIFIED FlightFareType = 0
	// flight entity type
	FlightFareType_FLIGHT_FARE_TYPE_FLIGHT FlightFareType = 1
	// fare entity type
	FlightFareType_FLIGHT_FARE_TYPE_FARE FlightFareType = 2
	// assignment entity type
	FlightFareType_FLIGHT_FARE_TYPE_ASSIGNMENT FlightFareType = 3
	// assignment entity type
	FlightFareType_FLIGHT_FARE_TYPE_BOOKING FlightFareType = 4
)

// Enum value maps for FlightFareType.
var (
	FlightFareType_name = map[int32]string{
		0: "FLIGHT_FARE_TYPE_UNSPECIFIED",
		1: "FLIGHT_FARE_TYPE_FLIGHT",
		2: "FLIGHT_FARE_TYPE_FARE",
		3: "FLIGHT_FARE_TYPE_ASSIGNMENT",
		4: "FLIGHT_FARE_TYPE_BOOKING",
	}
	FlightFareType_value = map[string]int32{
		"FLIGHT_FARE_TYPE_UNSPECIFIED": 0,
		"FLIGHT_FARE_TYPE_FLIGHT":      1,
		"FLIGHT_FARE_TYPE_FARE":        2,
		"FLIGHT_FARE_TYPE_ASSIGNMENT":  3,
		"FLIGHT_FARE_TYPE_BOOKING":     4,
	}
)

func (x FlightFareType) Enum() *FlightFareType {
	p := new(FlightFareType)
	*p = x
	return p
}

func (x FlightFareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightFareType) Descriptor() protoreflect.EnumDescriptor {
	return file_example_model_v2_flight_fares_proto_enumTypes[0].Descriptor()
}

func (FlightFareType) Type() protoreflect.EnumType {
	return &file_example_model_v2_flight_fares_proto_enumTypes[0]
}

func (x FlightFareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightFareType.Descriptor instead.
func (FlightFareType) EnumDescriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{0}
}

// Airport used for flight destination and origins
type Airport int32

const (
	// when not specified
	Airport_AIRPORT_UNSPECIFIED Airport = 0
	// denver
	Airport_AIRPORT_DEN Airport = 1
	// john-f-kennedy (new york)
	Airport_AIRPORT_JFK Airport = 2
	// san francisco
	Airport_AIRPORT_SFO Airport = 3
)

// Enum value maps for Airport.
var (
	Airport_name = map[int32]string{
		0: "AIRPORT_UNSPECIFIED",
		1: "AIRPORT_DEN",
		2: "AIRPORT_JFK",
		3: "AIRPORT_SFO",
	}
	Airport_value = map[string]int32{
		"AIRPORT_UNSPECIFIED": 0,
		"AIRPORT_DEN":         1,
		"AIRPORT_JFK":         2,
		"AIRPORT_SFO":         3,
	}
)

func (x Airport) Enum() *Airport {
	p := new(Airport)
	*p = x
	return p
}

func (x Airport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Airport) Descriptor() protoreflect.EnumDescriptor {
	return file_example_model_v2_flight_fares_proto_enumTypes[1].Descriptor()
}

func (Airport) Type() protoreflect.EnumType {
	return &file_example_model_v2_flight_fares_proto_enumTypes[1]
}

func (x Airport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Airport.Descriptor instead.
func (Airport) EnumDescriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{1}
}

// the type of flight
type FlightClass int32

const (
	// when not specified
	FlightClass_FLIGHT_CLASS_UNSPECIFIED FlightClass = 0
	// direct but with stops
	FlightClass_FLIGHT_CLASS_DIRECT FlightClass = 1
	// direct without any stops
	FlightClass_FLIGHT_CLASS_NON_STOP FlightClass = 2
)

// Enum value maps for FlightClass.
var (
	FlightClass_name = map[int32]string{
		0: "FLIGHT_CLASS_UNSPECIFIED",
		1: "FLIGHT_CLASS_DIRECT",
		2: "FLIGHT_CLASS_NON_STOP",
	}
	FlightClass_value = map[string]int32{
		"FLIGHT_CLASS_UNSPECIFIED": 0,
		"FLIGHT_CLASS_DIRECT":      1,
		"FLIGHT_CLASS_NON_STOP":    2,
	}
)

func (x FlightClass) Enum() *FlightClass {
	p := new(FlightClass)
	*p = x
	return p
}

func (x FlightClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightClass) Descriptor() protoreflect.EnumDescriptor {
	return file_example_model_v2_flight_fares_proto_enumTypes[2].Descriptor()
}

func (FlightClass) Type() protoreflect.EnumType {
	return &file_example_model_v2_flight_fares_proto_enumTypes[2]
}

func (x FlightClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightClass.Descriptor instead.
func (FlightClass) EnumDescriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{2}
}

// Special service requests
type SSR int32

const (
	// zero value
	SSR_SSR_UNSPECIFIED SSR = 0
	// wheelchair (manual power)
	SSR_SSR_WCMP SSR = 1
	// Vegetarian vegan meal
	SSR_SSR_VGML SSR = 2
)

// Enum value maps for SSR.
var (
	SSR_name = map[int32]string{
		0: "SSR_UNSPECIFIED",
		1: "SSR_WCMP",
		2: "SSR_VGML",
	}
	SSR_value = map[string]int32{
		"SSR_UNSPECIFIED": 0,
		"SSR_WCMP":        1,
		"SSR_VGML":        2,
	}
)

func (x SSR) Enum() *SSR {
	p := new(SSR)
	*p = x
	return p
}

func (x SSR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSR) Descriptor() protoreflect.EnumDescriptor {
	return file_example_model_v2_flight_fares_proto_enumTypes[3].Descriptor()
}

func (SSR) Type() protoreflect.EnumType {
	return &file_example_model_v2_flight_fares_proto_enumTypes[3]
}

func (x SSR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSR.Descriptor instead.
func (SSR) EnumDescriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{3}
}

// Flight entity
type Flight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the flight number
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// departure time of the flight
	DepatureAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=depature_at,json=depatureAt,proto3" json:"depature_at,omitempty"`
	// arrival time of the flight
	ArrivalAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=arrival_at,json=arrivalAt,proto3" json:"arrival_at,omitempty"`
	// origin of the flight
	Origin Airport `protobuf:"varint,4,opt,name=origin,proto3,enum=example.model.v2.Airport" json:"origin,omitempty"`
	// flight destination
	Destination Airport `protobuf:"varint,5,opt,name=destination,proto3,enum=example.model.v2.Airport" json:"destination,omitempty"`
	// kind of flight
	Class FlightClass `protobuf:"varint,6,opt,name=class,proto3,enum=example.model.v2.FlightClass" json:"class,omitempty"`
	// is part of a flight with segments
	IsSegment bool `protobuf:"varint,7,opt,name=is_segment,json=isSegment,proto3" json:"is_segment,omitempty"`
	// id if a segment
	SegmentId uint64 `protobuf:"varint,8,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// segments of the flight (if any)
	Segments string `protobuf:"bytes,9,opt,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Flight) Reset() {
	*x = Flight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flight) ProtoMessage() {}

func (x *Flight) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flight.ProtoReflect.Descriptor instead.
func (*Flight) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{0}
}

func (x *Flight) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Flight) GetDepatureAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DepatureAt
	}
	return nil
}

func (x *Flight) GetArrivalAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalAt
	}
	return nil
}

func (x *Flight) GetOrigin() Airport {
	if x != nil {
		return x.Origin
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Flight) GetDestination() Airport {
	if x != nil {
		return x.Destination
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Flight) GetClass() FlightClass {
	if x != nil {
		return x.Class
	}
	return FlightClass_FLIGHT_CLASS_UNSPECIFIED
}

func (x *Flight) GetIsSegment() bool {
	if x != nil {
		return x.IsSegment
	}
	return false
}

func (x *Flight) GetSegmentId() uint64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *Flight) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

// Fare for a flight
type Fare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start time of the fare
	StartAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	// end time of the fare
	EndAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	// origin of the fare
	Origin Airport `protobuf:"varint,3,opt,name=origin,proto3,enum=example.model.v2.Airport" json:"origin,omitempty"`
	// destination of the fare
	Destination Airport `protobuf:"varint,4,opt,name=destination,proto3,enum=example.model.v2.Airport" json:"destination,omitempty"`
	// class for the ticket fare
	Class FlightClass `protobuf:"varint,5,opt,name=class,proto3,enum=example.model.v2.FlightClass" json:"class,omitempty"`
}

func (x *Fare) Reset() {
	*x = Fare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fare) ProtoMessage() {}

func (x *Fare) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fare.ProtoReflect.Descriptor instead.
func (*Fare) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{1}
}

func (x *Fare) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Fare) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *Fare) GetOrigin() Airport {
	if x != nil {
		return x.Origin
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Fare) GetDestination() Airport {
	if x != nil {
		return x.Destination
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Fare) GetClass() FlightClass {
	if x != nil {
		return x.Class
	}
	return FlightClass_FLIGHT_CLASS_UNSPECIFIED
}

// Assignment for a flight
type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// flight number
	FlightNumber uint64 `protobuf:"varint,2,opt,name=flight_number,json=flightNumber,proto3" json:"flight_number,omitempty"`
	// segment for the assignment
	SegmentId uint64 `protobuf:"varint,3,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// seat in whch the passenger is put
	Seat string `protobuf:"bytes,4,opt,name=seat,proto3" json:"seat,omitempty"`
	// departure time of the flight
	DepartureAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=departure_at,json=departureAt,proto3" json:"departure_at,omitempty"`
	// arrival time of the flight
	ArrivalAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=arrival_at,json=arrivalAt,proto3" json:"arrival_at,omitempty"`
	// origin of the flight
	Origin Airport `protobuf:"varint,7,opt,name=origin,proto3,enum=example.model.v2.Airport" json:"origin,omitempty"`
	// flight destination
	Destination Airport `protobuf:"varint,8,opt,name=destination,proto3,enum=example.model.v2.Airport" json:"destination,omitempty"`
	// special service requests
	SpecialServiceRequests []SSR `protobuf:"varint,9,rep,packed,name=special_service_requests,json=specialServiceRequests,proto3,enum=example.model.v2.SSR" json:"special_service_requests,omitempty"`
	// first name of the passenger
	FirstName string `protobuf:"bytes,10,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// last name of the passenger
	LastName string `protobuf:"bytes,11,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{2}
}

func (x *Assignment) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Assignment) GetFlightNumber() uint64 {
	if x != nil {
		return x.FlightNumber
	}
	return 0
}

func (x *Assignment) GetSegmentId() uint64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *Assignment) GetSeat() string {
	if x != nil {
		return x.Seat
	}
	return ""
}

func (x *Assignment) GetDepartureAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DepartureAt
	}
	return nil
}

func (x *Assignment) GetArrivalAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalAt
	}
	return nil
}

func (x *Assignment) GetOrigin() Airport {
	if x != nil {
		return x.Origin
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Assignment) GetDestination() Airport {
	if x != nil {
		return x.Destination
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Assignment) GetSpecialServiceRequests() []SSR {
	if x != nil {
		return x.SpecialServiceRequests
	}
	return nil
}

func (x *Assignment) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Assignment) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// Booking on a flight
type Booking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flight number
	FlightNumber uint64 `protobuf:"varint,1,opt,name=flight_number,json=flightNumber,proto3" json:"flight_number,omitempty"`
	// departure time of the booking
	DepartureAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=departure_at,json=departureAt,proto3" json:"departure_at,omitempty"`
	// arrival time of the booking
	ArrivalAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=arrival_at,json=arrivalAt,proto3" json:"arrival_at,omitempty"`
	// segments of the booking
	Segments uint32 `protobuf:"varint,4,opt,name=segments,proto3" json:"segments,omitempty"`
	// origin of the flight
	Origin Airport `protobuf:"varint,5,opt,name=origin,proto3,enum=example.model.v2.Airport" json:"origin,omitempty"`
	// flight destination
	Destination Airport `protobuf:"varint,6,opt,name=destination,proto3,enum=example.model.v2.Airport" json:"destination,omitempty"`
	// first name of the passenger
	FirstName string `protobuf:"bytes,10,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// last name of the passenger
	LastName string `protobuf:"bytes,11,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *Booking) Reset() {
	*x = Booking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Booking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Booking) ProtoMessage() {}

func (x *Booking) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Booking.ProtoReflect.Descriptor instead.
func (*Booking) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{3}
}

func (x *Booking) GetFlightNumber() uint64 {
	if x != nil {
		return x.FlightNumber
	}
	return 0
}

func (x *Booking) GetDepartureAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DepartureAt
	}
	return nil
}

func (x *Booking) GetArrivalAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalAt
	}
	return nil
}

func (x *Booking) GetSegments() uint32 {
	if x != nil {
		return x.Segments
	}
	return 0
}

func (x *Booking) GetOrigin() Airport {
	if x != nil {
		return x.Origin
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Booking) GetDestination() Airport {
	if x != nil {
		return x.Destination
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *Booking) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Booking) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// The single table design that describes the table structure for the example here:
// https://dynobase.dev/dynamodb-single-table-design-examples/FlightFares/
type FlightFares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// partition key
	Pk string `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
	// sort key
	Sk string `protobuf:"bytes,2,opt,name=sk,proto3" json:"sk,omitempty"`
	// entity type stored in the table
	Type FlightFareType `protobuf:"varint,3,opt,name=type,proto3,enum=example.model.v2.FlightFareType" json:"type,omitempty"`
	// gsi1 partition key
	Gsi1Pk string `protobuf:"bytes,4,opt,name=gsi1_pk,json=gsi1Pk,proto3" json:"gsi1_pk,omitempty"`
	// gsi1 sort key
	Gsi1Sk string `protobuf:"bytes,5,opt,name=gsi1_sk,json=gsi1Sk,proto3" json:"gsi1_sk,omitempty"`
	// gsi2 partition key
	Gsi2Pk string `protobuf:"bytes,6,opt,name=gsi2_pk,json=gsi2Pk,proto3" json:"gsi2_pk,omitempty"`
	// gsi2 sort key
	Gsi2Sk string `protobuf:"bytes,7,opt,name=gsi2_sk,json=gsi2Sk,proto3" json:"gsi2_sk,omitempty"`
	// entity being stored in the table
	//
	// Types that are assignable to Entity:
	//
	//	*FlightFares_Flight
	//	*FlightFares_Fare
	//	*FlightFares_Assignment
	//	*FlightFares_Booking
	Entity isFlightFares_Entity `protobuf_oneof:"entity"`
}

func (x *FlightFares) Reset() {
	*x = FlightFares{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightFares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightFares) ProtoMessage() {}

func (x *FlightFares) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightFares.ProtoReflect.Descriptor instead.
func (*FlightFares) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{4}
}

func (x *FlightFares) GetPk() string {
	if x != nil {
		return x.Pk
	}
	return ""
}

func (x *FlightFares) GetSk() string {
	if x != nil {
		return x.Sk
	}
	return ""
}

func (x *FlightFares) GetType() FlightFareType {
	if x != nil {
		return x.Type
	}
	return FlightFareType_FLIGHT_FARE_TYPE_UNSPECIFIED
}

func (x *FlightFares) GetGsi1Pk() string {
	if x != nil {
		return x.Gsi1Pk
	}
	return ""
}

func (x *FlightFares) GetGsi1Sk() string {
	if x != nil {
		return x.Gsi1Sk
	}
	return ""
}

func (x *FlightFares) GetGsi2Pk() string {
	if x != nil {
		return x.Gsi2Pk
	}
	return ""
}

func (x *FlightFares) GetGsi2Sk() string {
	if x != nil {
		return x.Gsi2Sk
	}
	return ""
}

func (m *FlightFares) GetEntity() isFlightFares_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *FlightFares) GetFlight() *Flight {
	if x, ok := x.GetEntity().(*FlightFares_Flight); ok {
		return x.Flight
	}
	return nil
}

func (x *FlightFares) GetFare() *Fare {
	if x, ok := x.GetEntity().(*FlightFares_Fare); ok {
		return x.Fare
	}
	return nil
}

func (x *FlightFares) GetAssignment() *Assignment {
	if x, ok := x.GetEntity().(*FlightFares_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *FlightFares) GetBooking() *Booking {
	if x, ok := x.GetEntity().(*FlightFares_Booking); ok {
		return x.Booking
	}
	return nil
}

type isFlightFares_Entity interface {
	isFlightFares_Entity()
}

type FlightFares_Flight struct {
	// flight that has a fare
	Flight *Flight `protobuf:"bytes,100,opt,name=flight,proto3,oneof"`
}

type FlightFares_Fare struct {
	// fare for a flight
	Fare *Fare `protobuf:"bytes,101,opt,name=fare,proto3,oneof"`
}

type FlightFares_Assignment struct {
	// assignment of a passenger
	Assignment *Assignment `protobuf:"bytes,102,opt,name=assignment,proto3,oneof"`
}

type FlightFares_Booking struct {
	// booking on a flight
	Booking *Booking `protobuf:"bytes,103,opt,name=booking,proto3,oneof"`
}

func (*FlightFares_Flight) isFlightFares_Entity() {}

func (*FlightFares_Fare) isFlightFares_Entity() {}

func (*FlightFares_Assignment) isFlightFares_Entity() {}

func (*FlightFares_Booking) isFlightFares_Entity() {}

// Request to get fares from to aiports
type FaresFromToRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from the this airport, e.g: JFK
	From Airport `protobuf:"varint,1,opt,name=from,proto3,enum=example.model.v2.Airport" json:"from,omitempty"`
	// to this airport, e.g: SFO
	To Airport `protobuf:"varint,2,opt,name=to,proto3,enum=example.model.v2.Airport" json:"to,omitempty"`
}

func (x *FaresFromToRequest) Reset() {
	*x = FaresFromToRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaresFromToRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaresFromToRequest) ProtoMessage() {}

func (x *FaresFromToRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaresFromToRequest.ProtoReflect.Descriptor instead.
func (*FaresFromToRequest) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{5}
}

func (x *FaresFromToRequest) GetFrom() Airport {
	if x != nil {
		return x.From
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *FaresFromToRequest) GetTo() Airport {
	if x != nil {
		return x.To
	}
	return Airport_AIRPORT_UNSPECIFIED
}

// Response with fares
type FaresFromToResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// zer or more fares
	Fares []*Fare `protobuf:"bytes,1,rep,name=fares,proto3" json:"fares,omitempty"`
}

func (x *FaresFromToResponse) Reset() {
	*x = FaresFromToResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaresFromToResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaresFromToResponse) ProtoMessage() {}

func (x *FaresFromToResponse) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaresFromToResponse.ProtoReflect.Descriptor instead.
func (*FaresFromToResponse) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{6}
}

func (x *FaresFromToResponse) GetFares() []*Fare {
	if x != nil {
		return x.Fares
	}
	return nil
}

// Input into the access pattern. It will generate
type FlightsToFromInYearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// e.g: to JFK
	To Airport `protobuf:"varint,1,opt,name=to,proto3,enum=example.model.v2.Airport" json:"to,omitempty"`
	// e.g: from SFO
	From Airport `protobuf:"varint,2,opt,name=from,proto3,enum=example.model.v2.Airport" json:"from,omitempty"`
	// e.g: in 2021
	Year uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *FlightsToFromInYearRequest) Reset() {
	*x = FlightsToFromInYearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightsToFromInYearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightsToFromInYearRequest) ProtoMessage() {}

func (x *FlightsToFromInYearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightsToFromInYearRequest.ProtoReflect.Descriptor instead.
func (*FlightsToFromInYearRequest) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{7}
}

func (x *FlightsToFromInYearRequest) GetTo() Airport {
	if x != nil {
		return x.To
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *FlightsToFromInYearRequest) GetFrom() Airport {
	if x != nil {
		return x.From
	}
	return Airport_AIRPORT_UNSPECIFIED
}

func (x *FlightsToFromInYearRequest) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

// Output from the access pattern's execution
type FlightsToFromInYearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flights in the year
	Flights []*Flight `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty"`
}

func (x *FlightsToFromInYearResponse) Reset() {
	*x = FlightsToFromInYearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightsToFromInYearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightsToFromInYearResponse) ProtoMessage() {}

func (x *FlightsToFromInYearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightsToFromInYearResponse.ProtoReflect.Descriptor instead.
func (*FlightsToFromInYearResponse) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{8}
}

func (x *FlightsToFromInYearResponse) GetFlights() []*Flight {
	if x != nil {
		return x.Flights
	}
	return nil
}

// Input into the pattern
type PassengerBookingsInYearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// first name of the passenger
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// last name of hte passenger
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// year we're checking for
	Year uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *PassengerBookingsInYearRequest) Reset() {
	*x = PassengerBookingsInYearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassengerBookingsInYearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassengerBookingsInYearRequest) ProtoMessage() {}

func (x *PassengerBookingsInYearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassengerBookingsInYearRequest.ProtoReflect.Descriptor instead.
func (*PassengerBookingsInYearRequest) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{9}
}

func (x *PassengerBookingsInYearRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *PassengerBookingsInYearRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PassengerBookingsInYearRequest) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

// Output from the pattern
type PassengerBookingsInYearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// names of the passengers
	Bookings []*Booking `protobuf:"bytes,1,rep,name=bookings,proto3" json:"bookings,omitempty"`
}

func (x *PassengerBookingsInYearResponse) Reset() {
	*x = PassengerBookingsInYearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_model_v2_flight_fares_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassengerBookingsInYearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassengerBookingsInYearResponse) ProtoMessage() {}

func (x *PassengerBookingsInYearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_example_model_v2_flight_fares_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassengerBookingsInYearResponse.ProtoReflect.Descriptor instead.
func (*PassengerBookingsInYearResponse) Descriptor() ([]byte, []int) {
	return file_example_model_v2_flight_fares_proto_rawDescGZIP(), []int{10}
}

func (x *PassengerBookingsInYearResponse) GetBookings() []*Booking {
	if x != nil {
		return x.Bookings
	}
	return nil
}

var File_example_model_v2_flight_fares_proto protoreflect.FileDescriptor

var file_example_model_v2_flight_fares_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x76, 0x32, 0x2f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x1a, 0x14, 0x64, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97,
	0x03, 0x0a, 0x06, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x04, 0x46, 0x61, 0x72,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0xf3, 0x03, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x18, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x53, 0x52, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x0b, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x72, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x73, 0x69, 0x31, 0x5f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x73, 0x69, 0x31, 0x50, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x73, 0x69, 0x31,
	0x5f, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x73, 0x69, 0x31, 0x53,
	0x6b, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x73, 0x69, 0x32, 0x5f, 0x70, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x73, 0x69, 0x32, 0x50, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x73,
	0x69, 0x32, 0x5f, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x73, 0x69,
	0x32, 0x53, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x61, 0x72, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x61, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x3a, 0x2d, 0xd2, 0x44,
	0x2a, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x73, 0x10,
	0x01, 0x18, 0x02, 0x52, 0x0a, 0x0a, 0x04, 0x67, 0x73, 0x69, 0x31, 0x10, 0x04, 0x18, 0x05, 0x52,
	0x0a, 0x0a, 0x04, 0x67, 0x73, 0x69, 0x32, 0x10, 0x06, 0x18, 0x07, 0x42, 0x0f, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x05, 0xd2, 0x44, 0x02, 0x20, 0x03, 0x22, 0x6e, 0x0a, 0x12,
	0x46, 0x61, 0x72, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x29, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x13,
	0x46, 0x61, 0x72, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x52, 0x05, 0x66, 0x61, 0x72, 0x65,
	0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x54, 0x6f, 0x46,
	0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x51,
	0x0a, 0x1b, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49,
	0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x22, 0x70, 0x0a, 0x1e, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x22, 0x58, 0x0a, 0x1f, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0xa9, 0x01,
	0x0a, 0x0e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x41, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x55, 0x0a, 0x07, 0x41, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x49, 0x52, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x49, 0x52, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x49, 0x52, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4a, 0x46, 0x4b, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x49, 0x52, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x46, 0x4f, 0x10, 0x03,
	0x2a, 0x5f, 0x0a, 0x0b, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x02, 0x2a, 0x36, 0x0a, 0x03, 0x53, 0x53, 0x52, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x53, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x53, 0x52, 0x5f, 0x57, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x53, 0x52, 0x5f, 0x56, 0x47, 0x4d, 0x4c, 0x10, 0x02, 0x32, 0xa4, 0x03, 0x0a, 0x11, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x13, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x6f,
	0x6d, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x54, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x54, 0x6f, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0xd2, 0x44, 0x14, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x73, 0x12, 0x04, 0x67, 0x73, 0x69, 0x31, 0x12, 0x91, 0x01,
	0x0a, 0x17, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x49, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11,
	0xd2, 0x44, 0x0e, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x6d, 0x0a, 0x0b, 0x46, 0x61, 0x72, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x12, 0x24, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x72, 0x65, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0xd2,
	0x44, 0x0e, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x73,
	0x42, 0xd4, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x42, 0x10, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x61, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x77, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x3b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x45, 0x4d, 0x58, 0xaa, 0x02, 0x10,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x32,
	0xca, 0x02, 0x10, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x12, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x3a, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_example_model_v2_flight_fares_proto_rawDescOnce sync.Once
	file_example_model_v2_flight_fares_proto_rawDescData = file_example_model_v2_flight_fares_proto_rawDesc
)

func file_example_model_v2_flight_fares_proto_rawDescGZIP() []byte {
	file_example_model_v2_flight_fares_proto_rawDescOnce.Do(func() {
		file_example_model_v2_flight_fares_proto_rawDescData = protoimpl.X.CompressGZIP(file_example_model_v2_flight_fares_proto_rawDescData)
	})
	return file_example_model_v2_flight_fares_proto_rawDescData
}

var file_example_model_v2_flight_fares_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_example_model_v2_flight_fares_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_example_model_v2_flight_fares_proto_goTypes = []interface{}{
	(FlightFareType)(0),                     // 0: example.model.v2.FlightFareType
	(Airport)(0),                            // 1: example.model.v2.Airport
	(FlightClass)(0),                        // 2: example.model.v2.FlightClass
	(SSR)(0),                                // 3: example.model.v2.SSR
	(*Flight)(nil),                          // 4: example.model.v2.Flight
	(*Fare)(nil),                            // 5: example.model.v2.Fare
	(*Assignment)(nil),                      // 6: example.model.v2.Assignment
	(*Booking)(nil),                         // 7: example.model.v2.Booking
	(*FlightFares)(nil),                     // 8: example.model.v2.FlightFares
	(*FaresFromToRequest)(nil),              // 9: example.model.v2.FaresFromToRequest
	(*FaresFromToResponse)(nil),             // 10: example.model.v2.FaresFromToResponse
	(*FlightsToFromInYearRequest)(nil),      // 11: example.model.v2.FlightsToFromInYearRequest
	(*FlightsToFromInYearResponse)(nil),     // 12: example.model.v2.FlightsToFromInYearResponse
	(*PassengerBookingsInYearRequest)(nil),  // 13: example.model.v2.PassengerBookingsInYearRequest
	(*PassengerBookingsInYearResponse)(nil), // 14: example.model.v2.PassengerBookingsInYearResponse
	(*timestamppb.Timestamp)(nil),           // 15: google.protobuf.Timestamp
}
var file_example_model_v2_flight_fares_proto_depIdxs = []int32{
	15, // 0: example.model.v2.Flight.depature_at:type_name -> google.protobuf.Timestamp
	15, // 1: example.model.v2.Flight.arrival_at:type_name -> google.protobuf.Timestamp
	1,  // 2: example.model.v2.Flight.origin:type_name -> example.model.v2.Airport
	1,  // 3: example.model.v2.Flight.destination:type_name -> example.model.v2.Airport
	2,  // 4: example.model.v2.Flight.class:type_name -> example.model.v2.FlightClass
	15, // 5: example.model.v2.Fare.start_at:type_name -> google.protobuf.Timestamp
	15, // 6: example.model.v2.Fare.end_at:type_name -> google.protobuf.Timestamp
	1,  // 7: example.model.v2.Fare.origin:type_name -> example.model.v2.Airport
	1,  // 8: example.model.v2.Fare.destination:type_name -> example.model.v2.Airport
	2,  // 9: example.model.v2.Fare.class:type_name -> example.model.v2.FlightClass
	15, // 10: example.model.v2.Assignment.departure_at:type_name -> google.protobuf.Timestamp
	15, // 11: example.model.v2.Assignment.arrival_at:type_name -> google.protobuf.Timestamp
	1,  // 12: example.model.v2.Assignment.origin:type_name -> example.model.v2.Airport
	1,  // 13: example.model.v2.Assignment.destination:type_name -> example.model.v2.Airport
	3,  // 14: example.model.v2.Assignment.special_service_requests:type_name -> example.model.v2.SSR
	15, // 15: example.model.v2.Booking.departure_at:type_name -> google.protobuf.Timestamp
	15, // 16: example.model.v2.Booking.arrival_at:type_name -> google.protobuf.Timestamp
	1,  // 17: example.model.v2.Booking.origin:type_name -> example.model.v2.Airport
	1,  // 18: example.model.v2.Booking.destination:type_name -> example.model.v2.Airport
	0,  // 19: example.model.v2.FlightFares.type:type_name -> example.model.v2.FlightFareType
	4,  // 20: example.model.v2.FlightFares.flight:type_name -> example.model.v2.Flight
	5,  // 21: example.model.v2.FlightFares.fare:type_name -> example.model.v2.Fare
	6,  // 22: example.model.v2.FlightFares.assignment:type_name -> example.model.v2.Assignment
	7,  // 23: example.model.v2.FlightFares.booking:type_name -> example.model.v2.Booking
	1,  // 24: example.model.v2.FaresFromToRequest.from:type_name -> example.model.v2.Airport
	1,  // 25: example.model.v2.FaresFromToRequest.to:type_name -> example.model.v2.Airport
	5,  // 26: example.model.v2.FaresFromToResponse.fares:type_name -> example.model.v2.Fare
	1,  // 27: example.model.v2.FlightsToFromInYearRequest.to:type_name -> example.model.v2.Airport
	1,  // 28: example.model.v2.FlightsToFromInYearRequest.from:type_name -> example.model.v2.Airport
	4,  // 29: example.model.v2.FlightsToFromInYearResponse.flights:type_name -> example.model.v2.Flight
	7,  // 30: example.model.v2.PassengerBookingsInYearResponse.bookings:type_name -> example.model.v2.Booking
	11, // 31: example.model.v2.FlightFareService.FlightsToFromInYear:input_type -> example.model.v2.FlightsToFromInYearRequest
	13, // 32: example.model.v2.FlightFareService.PassengerBookingsInYear:input_type -> example.model.v2.PassengerBookingsInYearRequest
	9,  // 33: example.model.v2.FlightFareService.FaresFromTo:input_type -> example.model.v2.FaresFromToRequest
	12, // 34: example.model.v2.FlightFareService.FlightsToFromInYear:output_type -> example.model.v2.FlightsToFromInYearResponse
	14, // 35: example.model.v2.FlightFareService.PassengerBookingsInYear:output_type -> example.model.v2.PassengerBookingsInYearResponse
	10, // 36: example.model.v2.FlightFareService.FaresFromTo:output_type -> example.model.v2.FaresFromToResponse
	34, // [34:37] is the sub-list for method output_type
	31, // [31:34] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_example_model_v2_flight_fares_proto_init() }
func file_example_model_v2_flight_fares_proto_init() {
	if File_example_model_v2_flight_fares_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_example_model_v2_flight_fares_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Booking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightFares); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaresFromToRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaresFromToResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightsToFromInYearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightsToFromInYearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassengerBookingsInYearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_model_v2_flight_fares_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassengerBookingsInYearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_example_model_v2_flight_fares_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*FlightFares_Flight)(nil),
		(*FlightFares_Fare)(nil),
		(*FlightFares_Assignment)(nil),
		(*FlightFares_Booking)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_example_model_v2_flight_fares_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_example_model_v2_flight_fares_proto_goTypes,
		DependencyIndexes: file_example_model_v2_flight_fares_proto_depIdxs,
		EnumInfos:         file_example_model_v2_flight_fares_proto_enumTypes,
		MessageInfos:      file_example_model_v2_flight_fares_proto_msgTypes,
	}.Build()
	File_example_model_v2_flight_fares_proto = out.File
	file_example_model_v2_flight_fares_proto_rawDesc = nil
	file_example_model_v2_flight_fares_proto_goTypes = nil
	file_example_model_v2_flight_fares_proto_depIdxs = nil
}
