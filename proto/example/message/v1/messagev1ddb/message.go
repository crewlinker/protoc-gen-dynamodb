// Code generated by protoc-gen-dynamodb. DO NOT EDIT.

// Package messagev1ddb holds generated schema structure
package messagev1ddb

import (
	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	ddbpath "github.com/crewlinker/protoc-gen-dynamodb/ddb/ddbpath"
)

// Engine allows for constructing type-safe expression names
type Engine struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p Engine) WithDynamoNameBuilder(n expression.NameBuilder) Engine {
	p.NameBuilder = n
	return p
}

// Brand appends the path being build
func (p Engine) Brand() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Dirtyness appends the path being build
func (p Engine) Dirtyness() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// Car allows for constructing type-safe expression names
type Car struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p Car) WithDynamoNameBuilder(n expression.NameBuilder) Car {
	p.NameBuilder = n
	return p
}

// Engine returns 'p' with the attribute name appended and allow subselecting nested message
func (p Car) Engine() Engine {
	return Engine{p.AppendName(expression.Name("1"))}
}

// NrOfWheels appends the path being build
func (p Car) NrOfWheels() expression.NameBuilder {
	return p.AppendName(expression.Name("ws"))
}

// Name appends the path being build
func (p Car) Name() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// DynamoKeyNames returns the attribute names of the partition and sort keys respectively
func (p Car) DynamoKeyNames() (v []string) {
	v = append(v, "ws")
	return
}

// Appliance allows for constructing type-safe expression names
type Appliance struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p Appliance) WithDynamoNameBuilder(n expression.NameBuilder) Appliance {
	p.NameBuilder = n
	return p
}

// Brand appends the path being build
func (p Appliance) Brand() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// Ignored allows for constructing type-safe expression names
type Ignored struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p Ignored) WithDynamoNameBuilder(n expression.NameBuilder) Ignored {
	p.NameBuilder = n
	return p
}

// Visible appends the path being build
func (p Ignored) Visible() expression.NameBuilder {
	return p.AppendName(expression.Name("4"))
}

// Kitchen allows for constructing type-safe expression names
type Kitchen struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p Kitchen) WithDynamoNameBuilder(n expression.NameBuilder) Kitchen {
	p.NameBuilder = n
	return p
}

// Brand appends the path being build
func (p Kitchen) Brand() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// IsRenovated appends the path being build
func (p Kitchen) IsRenovated() expression.NameBuilder {
	return p.AppendName(expression.Name("2"))
}

// QrCode appends the path being build
func (p Kitchen) QrCode() expression.NameBuilder {
	return p.AppendName(expression.Name("3"))
}

// NumSmallKnifes appends the path being build
func (p Kitchen) NumSmallKnifes() expression.NameBuilder {
	return p.AppendName(expression.Name("4"))
}

// NumSharpKnifes appends the path being build
func (p Kitchen) NumSharpKnifes() expression.NameBuilder {
	return p.AppendName(expression.Name("5"))
}

// NumBluntKnifes appends the path being build
func (p Kitchen) NumBluntKnifes() expression.NameBuilder {
	return p.AppendName(expression.Name("6"))
}

// NumSmallForks appends the path being build
func (p Kitchen) NumSmallForks() expression.NameBuilder {
	return p.AppendName(expression.Name("7"))
}

// NumMediumForks appends the path being build
func (p Kitchen) NumMediumForks() expression.NameBuilder {
	return p.AppendName(expression.Name("8"))
}

// NumLargeForks appends the path being build
func (p Kitchen) NumLargeForks() expression.NameBuilder {
	return p.AppendName(expression.Name("9"))
}

// PercentBlackTiles appends the path being build
func (p Kitchen) PercentBlackTiles() expression.NameBuilder {
	return p.AppendName(expression.Name("10"))
}

// PercentWhiteTiles appends the path being build
func (p Kitchen) PercentWhiteTiles() expression.NameBuilder {
	return p.AppendName(expression.Name("11"))
}

// Dirtyness appends the path being build
func (p Kitchen) Dirtyness() expression.NameBuilder {
	return p.AppendName(expression.Name("12"))
}

// Furniture returns 'p' appended with the attribute while allow map keys on a nested message
func (p Kitchen) Furniture() ddbpath.ItemMap[Appliance] {
	return ddbpath.ItemMap[Appliance]{NameBuilder: p.AppendName(expression.Name("13"))}
}

// Calendar returns 'p' appended with the attribute name and allow map keys to be specified
func (p Kitchen) Calendar() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("14"))}
}

// WasherEngine returns 'p' with the attribute name appended and allow subselecting nested message
func (p Kitchen) WasherEngine() Engine {
	return Engine{p.AppendName(expression.Name("15"))}
}

// ExtraKitchen returns 'p' with the attribute name appended and allow subselecting nested message
func (p Kitchen) ExtraKitchen() Kitchen {
	return Kitchen{p.AppendName(expression.Name("16"))}
}

// Timer appends the path being build
func (p Kitchen) Timer() expression.NameBuilder {
	return p.AppendName(expression.Name("17"))
}

// WallTime appends the path being build
func (p Kitchen) WallTime() expression.NameBuilder {
	return p.AppendName(expression.Name("18"))
}

// ApplianceEngines returns 'p' appended with the attribute while allow indexing a nested message
func (p Kitchen) ApplianceEngines() ddbpath.ItemList[Engine] {
	return ddbpath.ItemList[Engine]{NameBuilder: p.AppendName(expression.Name("19"))}
}

// OtherBrands returns 'p' appended with the attribute name and allow indexing
func (p Kitchen) OtherBrands() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("20"))}
}

// SomeAny appends the path being build
func (p Kitchen) SomeAny() expression.NameBuilder {
	return p.AppendName(expression.Name("21"))
}

// SomeMask appends the path being build
func (p Kitchen) SomeMask() expression.NameBuilder {
	return p.AppendName(expression.Name("22"))
}

// SomeValue appends the path being build
func (p Kitchen) SomeValue() expression.NameBuilder {
	return p.AppendName(expression.Name("23"))
}

// OptString appends the path being build
func (p Kitchen) OptString() expression.NameBuilder {
	return p.AppendName(expression.Name("24"))
}

// ValStr appends the path being build
func (p Kitchen) ValStr() expression.NameBuilder {
	return p.AppendName(expression.Name("25"))
}

// ValBytes appends the path being build
func (p Kitchen) ValBytes() expression.NameBuilder {
	return p.AppendName(expression.Name("26"))
}

// ListOfTs returns 'p' appended with the attribute name and allow indexing
func (p Kitchen) ListOfTs() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("27"))}
}

// StringSet returns 'p' appended with the attribute name and allow indexing
func (p Kitchen) StringSet() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("28"))}
}

// NumberSet returns 'p' appended with the attribute name and allow indexing
func (p Kitchen) NumberSet() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("29"))}
}

// BytesSet returns 'p' appended with the attribute name and allow indexing
func (p Kitchen) BytesSet() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("30"))}
}

// DynamoKeyNames returns the attribute names of the partition and sort keys respectively
func (p Kitchen) DynamoKeyNames() (v []string) {
	v = append(v, "1")
	v = append(v, "3")
	return
}

// Empty allows for constructing type-safe expression names
type Empty struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p Empty) WithDynamoNameBuilder(n expression.NameBuilder) Empty {
	p.NameBuilder = n
	return p
}

// MapGalore allows for constructing type-safe expression names
type MapGalore struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p MapGalore) WithDynamoNameBuilder(n expression.NameBuilder) MapGalore {
	p.NameBuilder = n
	return p
}

// Int64Int64 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Int64Int64() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("1"))}
}

// Uint64Uint64 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Uint64Uint64() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("2"))}
}

// Fixed64Fixed64 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Fixed64Fixed64() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("3"))}
}

// Sint64Sint64 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Sint64Sint64() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("4"))}
}

// Sfixed64Sfixed64 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Sfixed64Sfixed64() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("5"))}
}

// Int32Int32 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Int32Int32() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("6"))}
}

// Uint32Uint32 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Uint32Uint32() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("7"))}
}

// Fixed32Fixed32 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Fixed32Fixed32() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("8"))}
}

// Sint32Sint32 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Sint32Sint32() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("9"))}
}

// Sfixed32Sfixed32 returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Sfixed32Sfixed32() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("10"))}
}

// Stringstring returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Stringstring() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("11"))}
}

// Boolbool returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Boolbool() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("12"))}
}

// Stringbytes returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Stringbytes() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("13"))}
}

// Stringdouble returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Stringdouble() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("14"))}
}

// Stringfloat returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Stringfloat() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("15"))}
}

// Stringduration returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Stringduration() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("16"))}
}

// Stringtimestamp returns 'p' appended with the attribute name and allow map keys to be specified
func (p MapGalore) Stringtimestamp() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("17"))}
}

// Boolengine returns 'p' appended with the attribute while allow map keys on a nested message
func (p MapGalore) Boolengine() ddbpath.ItemMap[Engine] {
	return ddbpath.ItemMap[Engine]{NameBuilder: p.AppendName(expression.Name("18"))}
}

// Uintengine returns 'p' appended with the attribute while allow map keys on a nested message
func (p MapGalore) Uintengine() ddbpath.ItemMap[Engine] {
	return ddbpath.ItemMap[Engine]{NameBuilder: p.AppendName(expression.Name("19"))}
}

// ValueGalore allows for constructing type-safe expression names
type ValueGalore struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p ValueGalore) WithDynamoNameBuilder(n expression.NameBuilder) ValueGalore {
	p.NameBuilder = n
	return p
}

// SomeValue appends the path being build
func (p ValueGalore) SomeValue() expression.NameBuilder {
	return p.AppendName(expression.Name("1"))
}

// FieldPresence allows for constructing type-safe expression names
type FieldPresence struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p FieldPresence) WithDynamoNameBuilder(n expression.NameBuilder) FieldPresence {
	p.NameBuilder = n
	return p
}

// Str appends the path being build
func (p FieldPresence) Str() expression.NameBuilder {
	return p.AppendName(expression.Name("str"))
}

// OptStr appends the path being build
func (p FieldPresence) OptStr() expression.NameBuilder {
	return p.AppendName(expression.Name("optStr"))
}

// Msg returns 'p' with the attribute name appended and allow subselecting nested message
func (p FieldPresence) Msg() Engine {
	return Engine{p.AppendName(expression.Name("msg"))}
}

// OptMsg returns 'p' with the attribute name appended and allow subselecting nested message
func (p FieldPresence) OptMsg() Engine {
	return Engine{p.AppendName(expression.Name("optMsg"))}
}

// StrList returns 'p' appended with the attribute name and allow indexing
func (p FieldPresence) StrList() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("strList"))}
}

// MsgList returns 'p' appended with the attribute while allow indexing a nested message
func (p FieldPresence) MsgList() ddbpath.ItemList[Engine] {
	return ddbpath.ItemList[Engine]{NameBuilder: p.AppendName(expression.Name("msgList"))}
}

// StrMap returns 'p' appended with the attribute name and allow map keys to be specified
func (p FieldPresence) StrMap() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("strMap"))}
}

// MsgMap returns 'p' appended with the attribute while allow map keys on a nested message
func (p FieldPresence) MsgMap() ddbpath.ItemMap[Engine] {
	return ddbpath.ItemMap[Engine]{NameBuilder: p.AppendName(expression.Name("msgMap"))}
}

// Enum appends the path being build
func (p FieldPresence) Enum() expression.NameBuilder {
	return p.AppendName(expression.Name("enum"))
}

// OptEnum appends the path being build
func (p FieldPresence) OptEnum() expression.NameBuilder {
	return p.AppendName(expression.Name("optEnum"))
}

// OneofStr appends the path being build
func (p FieldPresence) OneofStr() expression.NameBuilder {
	return p.AppendName(expression.Name("oneofStr"))
}

// OneofMsg returns 'p' with the attribute name appended and allow subselecting nested message
func (p FieldPresence) OneofMsg() Engine {
	return Engine{p.AppendName(expression.Name("oneofMsg"))}
}

// StrVal appends the path being build
func (p FieldPresence) StrVal() expression.NameBuilder {
	return p.AppendName(expression.Name("strVal"))
}

// BoolVal appends the path being build
func (p FieldPresence) BoolVal() expression.NameBuilder {
	return p.AppendName(expression.Name("boolVal"))
}

// BytesVal appends the path being build
func (p FieldPresence) BytesVal() expression.NameBuilder {
	return p.AppendName(expression.Name("bytesVal"))
}

// DoubleVal appends the path being build
func (p FieldPresence) DoubleVal() expression.NameBuilder {
	return p.AppendName(expression.Name("doubleVal"))
}

// FloatVal appends the path being build
func (p FieldPresence) FloatVal() expression.NameBuilder {
	return p.AppendName(expression.Name("floatVal"))
}

// Int32Val appends the path being build
func (p FieldPresence) Int32Val() expression.NameBuilder {
	return p.AppendName(expression.Name("int32Val"))
}

// Int64Val appends the path being build
func (p FieldPresence) Int64Val() expression.NameBuilder {
	return p.AppendName(expression.Name("int64Val"))
}

// Uint32Val appends the path being build
func (p FieldPresence) Uint32Val() expression.NameBuilder {
	return p.AppendName(expression.Name("uint32Val"))
}

// Uint64Val appends the path being build
func (p FieldPresence) Uint64Val() expression.NameBuilder {
	return p.AppendName(expression.Name("uint64Val"))
}

// JsonFields allows for constructing type-safe expression names
type JsonFields struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p JsonFields) WithDynamoNameBuilder(n expression.NameBuilder) JsonFields {
	p.NameBuilder = n
	return p
}

// JsonStrList returns 'p' appended with the attribute name and allow indexing
func (p JsonFields) JsonStrList() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("1"))}
}

// JsonEngine returns 'p' with the attribute name appended and allow subselecting nested message
func (p JsonFields) JsonEngine() Engine {
	return Engine{p.AppendName(expression.Name("json_engine"))}
}

// JsonIntMap returns 'p' appended with the attribute name and allow map keys to be specified
func (p JsonFields) JsonIntMap() ddbpath.Map {
	return ddbpath.Map{NameBuilder: p.AppendName(expression.Name("4"))}
}

// JsonEngineList returns 'p' appended with the attribute while allow indexing a nested message
func (p JsonFields) JsonEngineList() ddbpath.ItemList[Engine] {
	return ddbpath.ItemList[Engine]{NameBuilder: p.AppendName(expression.Name("2"))}
}

// JsonEngineMap returns 'p' appended with the attribute while allow map keys on a nested message
func (p JsonFields) JsonEngineMap() ddbpath.ItemMap[Engine] {
	return ddbpath.ItemMap[Engine]{NameBuilder: p.AppendName(expression.Name("5"))}
}

// JsonNrSet returns 'p' appended with the attribute name and allow indexing
func (p JsonFields) JsonNrSet() ddbpath.List {
	return ddbpath.List{NameBuilder: p.AppendName(expression.Name("6"))}
}

// JsonOneofs allows for constructing type-safe expression names
type JsonOneofs struct {
	expression.NameBuilder
}

// WithDynamoNameBuilder allows generic types to overwrite the path
func (p JsonOneofs) WithDynamoNameBuilder(n expression.NameBuilder) JsonOneofs {
	p.NameBuilder = n
	return p
}

// OneofStr appends the path being build
func (p JsonOneofs) OneofStr() expression.NameBuilder {
	return p.AppendName(expression.Name("7"))
}

// OneofMsg returns 'p' with the attribute name appended and allow subselecting nested message
func (p JsonOneofs) OneofMsg() Engine {
	return Engine{p.AppendName(expression.Name("8"))}
}
