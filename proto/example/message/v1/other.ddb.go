// Code generated by protoc-gen-dynamodb. DO NOT EDIT.

package messagev1

import (
	"fmt"
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	ddb "github.com/crewlinker/protoc-gen-dynamodb/ddb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// MarshalDynamoItem marshals dat into a dynamodb attribute map
func (x *OtherKitchen) MarshalDynamoItem() (m map[string]types.AttributeValue, err error) {
	m = make(map[string]types.AttributeValue)
	if x.AnotherKitchen != nil {
		m16, err := ddb.MarshalDynamoMessage(x.GetAnotherKitchen())
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'AnotherKitchen': %w", err)
		}
		m["16"] = m16
	}
	if x.OtherTimer != nil {
		m17, err := ddb.MarshalDynamoMessage(x.GetOtherTimer())
		if err != nil {
			return nil, fmt.Errorf("failed to marshal field 'OtherTimer': %w", err)
		}
		m["17"] = m17
	}
	return m, nil
}

// UnmarshalDynamoItem unmarshals data from a dynamodb attribute map
func (x *OtherKitchen) UnmarshalDynamoItem(m map[string]types.AttributeValue) (err error) {
	if m["16"] != nil {
		x.AnotherKitchen = new(Kitchen)
		err = ddb.UnmarshalDynamoMessage(m["16"], x.AnotherKitchen)
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'AnotherKitchen': %w", err)
		}
	}
	if m["17"] != nil {
		x.OtherTimer = new(durationpb.Duration)
		err = ddb.UnmarshalDynamoMessage(m["17"], x.OtherTimer)
		if err != nil {
			return fmt.Errorf("failed to unmarshal field 'OtherTimer': %w", err)
		}
	}
	return nil
}

// OtherKitchen allows for constructing type-safe expression names
type OtherKitchenPath string

// InOtherKitchen starts the building of a path into a kitchen item
func InOtherKitchen() (p OtherKitchenPath) {
	return p
}

// Set allows generic list builder to replace the path value
func (p OtherKitchenPath) Set(v string) OtherKitchenPath {
	p = OtherKitchenPath(v)
	return p
}

// AnotherKitchen returns 'p' with the attribute name appended and allow subselecting nested message
func (p OtherKitchenPath) AnotherKitchen() KitchenPath {
	return KitchenPath(p + ".16")
}
