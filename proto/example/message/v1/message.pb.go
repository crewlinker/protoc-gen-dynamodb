// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: example/message/v1/message.proto

package messagev1

import (
	_ "github.com/crewlinker/protoc-gen-dynamodb/proto/ddb/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DirtyNess describes how dirty a sink is
type Dirtyness int32

const (
	// unknown amount of dirtyness
	Dirtyness_DIRTYNESS_UNSPECIFIED Dirtyness = 0
	// no dirtyness
	Dirtyness_DIRTYNESS_CLEAN Dirtyness = 1
)

// Enum value maps for Dirtyness.
var (
	Dirtyness_name = map[int32]string{
		0: "DIRTYNESS_UNSPECIFIED",
		1: "DIRTYNESS_CLEAN",
	}
	Dirtyness_value = map[string]int32{
		"DIRTYNESS_UNSPECIFIED": 0,
		"DIRTYNESS_CLEAN":       1,
	}
)

func (x Dirtyness) Enum() *Dirtyness {
	p := new(Dirtyness)
	*p = x
	return p
}

func (x Dirtyness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dirtyness) Descriptor() protoreflect.EnumDescriptor {
	return file_example_message_v1_message_proto_enumTypes[0].Descriptor()
}

func (Dirtyness) Type() protoreflect.EnumType {
	return &file_example_message_v1_message_proto_enumTypes[0]
}

func (x Dirtyness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dirtyness.Descriptor instead.
func (Dirtyness) EnumDescriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{0}
}

// Engine of a car
type Engine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// brand name
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	// how dirty is the sink
	Dirtyness Dirtyness `protobuf:"varint,2,opt,name=dirtyness,proto3,enum=example.message.v1.Dirtyness" json:"dirtyness,omitempty"`
}

func (x *Engine) Reset() {
	*x = Engine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Engine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Engine) ProtoMessage() {}

func (x *Engine) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Engine.ProtoReflect.Descriptor instead.
func (*Engine) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *Engine) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Engine) GetDirtyness() Dirtyness {
	if x != nil {
		return x.Dirtyness
	}
	return Dirtyness_DIRTYNESS_UNSPECIFIED
}

// Car message
type Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kitchen sink
	Engine *Engine `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// how many wheels does the car have
	NrOfWheels int64 `protobuf:"varint,3,opt,name=nr_of_wheels,json=nrOfWheels,proto3" json:"nr_of_wheels,omitempty"`
	// name of the car
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Car) Reset() {
	*x = Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *Car) GetEngine() *Engine {
	if x != nil {
		return x.Engine
	}
	return nil
}

func (x *Car) GetNrOfWheels() int64 {
	if x != nil {
		return x.NrOfWheels
	}
	return 0
}

func (x *Car) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Appliance in the kitchen
type Appliance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// brand of the appliance
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *Appliance) Reset() {
	*x = Appliance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appliance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appliance) ProtoMessage() {}

func (x *Appliance) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appliance.ProtoReflect.Descriptor instead.
func (*Appliance) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *Appliance) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

// Ignored message tests omitting of fields works correctly
type Ignored struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pk is omitted
	Pk string `protobuf:"bytes,1,opt,name=pk,proto3" json:"pk,omitempty"`
	// sk is omitted
	Sk string `protobuf:"bytes,2,opt,name=sk,proto3" json:"sk,omitempty"`
	// other field is also omitted
	Other string `protobuf:"bytes,3,opt,name=other,proto3" json:"other,omitempty"`
	// visible method is not omitted
	Visible string `protobuf:"bytes,4,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *Ignored) Reset() {
	*x = Ignored{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ignored) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ignored) ProtoMessage() {}

func (x *Ignored) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ignored.ProtoReflect.Descriptor instead.
func (*Ignored) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *Ignored) GetPk() string {
	if x != nil {
		return x.Pk
	}
	return ""
}

func (x *Ignored) GetSk() string {
	if x != nil {
		return x.Sk
	}
	return ""
}

func (x *Ignored) GetOther() string {
	if x != nil {
		return x.Other
	}
	return ""
}

func (x *Ignored) GetVisible() string {
	if x != nil {
		return x.Visible
	}
	return ""
}

// Kitchen holds all possible Protobuf field types
type Kitchen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// brand of kitchen
	Brand string `protobuf:"bytes,1,opt,name=brand,proto3" json:"brand,omitempty"`
	// is the kitchen renovated
	IsRenovated bool `protobuf:"varint,2,opt,name=is_renovated,json=isRenovated,proto3" json:"is_renovated,omitempty"`
	// some data
	QrCode []byte `protobuf:"bytes,3,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	// small knife count
	NumSmallKnifes int32 `protobuf:"varint,4,opt,name=num_small_knifes,json=numSmallKnifes,proto3" json:"num_small_knifes,omitempty"`
	// sharp kife count
	NumSharpKnifes uint32 `protobuf:"fixed32,5,opt,name=num_sharp_knifes,json=numSharpKnifes,proto3" json:"num_sharp_knifes,omitempty"`
	// blunt knife count
	NumBluntKnifes uint32 `protobuf:"varint,6,opt,name=num_blunt_knifes,json=numBluntKnifes,proto3" json:"num_blunt_knifes,omitempty"`
	// num small forks
	NumSmallForks int64 `protobuf:"varint,7,opt,name=num_small_forks,json=numSmallForks,proto3" json:"num_small_forks,omitempty"`
	// num medium forks
	NumMediumForks uint64 `protobuf:"fixed64,8,opt,name=num_medium_forks,json=numMediumForks,proto3" json:"num_medium_forks,omitempty"`
	// large forks count
	NumLargeForks uint64 `protobuf:"varint,9,opt,name=num_large_forks,json=numLargeForks,proto3" json:"num_large_forks,omitempty"`
	// how many of the tiles are black
	PercentBlackTiles float32 `protobuf:"fixed32,10,opt,name=percent_black_tiles,json=percentBlackTiles,proto3" json:"percent_black_tiles,omitempty"`
	// precent white tiles
	PercentWhiteTiles float64 `protobuf:"fixed64,11,opt,name=percent_white_tiles,json=percentWhiteTiles,proto3" json:"percent_white_tiles,omitempty"`
	// dirtyness enum
	Dirtyness Dirtyness `protobuf:"varint,12,opt,name=dirtyness,proto3,enum=example.message.v1.Dirtyness" json:"dirtyness,omitempty"`
	// map with messages
	Furniture map[int64]*Appliance `protobuf:"bytes,13,rep,name=furniture,proto3" json:"furniture,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map with numbers
	Calendar map[string]int64 `protobuf:"bytes,14,rep,name=calendar,proto3" json:"calendar,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// nested message
	WasherEngine *Engine `protobuf:"bytes,15,opt,name=washer_engine,json=washerEngine,proto3" json:"washer_engine,omitempty"`
	// extra nested message to test recursion
	ExtraKitchen *Kitchen `protobuf:"bytes,16,opt,name=extra_kitchen,json=extraKitchen,proto3" json:"extra_kitchen,omitempty"`
	// well-known Duration
	Timer *durationpb.Duration `protobuf:"bytes,17,opt,name=timer,proto3" json:"timer,omitempty"`
	// well-known Timestamp
	WallTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// nested list of messages
	ApplianceEngines []*Engine `protobuf:"bytes,19,rep,name=appliance_engines,json=applianceEngines,proto3" json:"appliance_engines,omitempty"`
	// repeated basic type
	OtherBrands []string `protobuf:"bytes,20,rep,name=other_brands,json=otherBrands,proto3" json:"other_brands,omitempty"`
	// well-known Any field
	SomeAny *anypb.Any `protobuf:"bytes,21,opt,name=some_any,json=someAny,proto3" json:"some_any,omitempty"`
	// well-known FieldMask field
	SomeMask *fieldmaskpb.FieldMask `protobuf:"bytes,22,opt,name=some_mask,json=someMask,proto3" json:"some_mask,omitempty"`
	// struct value
	SomeValue *structpb.Value `protobuf:"bytes,23,opt,name=some_value,json=someValue,proto3" json:"some_value,omitempty"`
	// optional string
	OptString *string `protobuf:"bytes,24,opt,name=opt_string,json=optString,proto3,oneof" json:"opt_string,omitempty"`
	// string value (other kind of optional)
	ValStr *wrapperspb.StringValue `protobuf:"bytes,25,opt,name=val_str,json=valStr,proto3" json:"val_str,omitempty"`
	// string value (other kind of optional)
	ValBytes *wrapperspb.BytesValue `protobuf:"bytes,26,opt,name=val_bytes,json=valBytes,proto3" json:"val_bytes,omitempty"`
	// list of timestamps
	ListOfTs []*timestamppb.Timestamp `protobuf:"bytes,27,rep,name=list_of_ts,json=listOfTs,proto3" json:"list_of_ts,omitempty"`
	// set of strings
	StringSet []string `protobuf:"bytes,28,rep,name=string_set,json=stringSet,proto3" json:"string_set,omitempty"`
	// set of numbers
	NumberSet []int64 `protobuf:"varint,29,rep,packed,name=number_set,json=numberSet,proto3" json:"number_set,omitempty"`
	// set of bytes
	BytesSet [][]byte `protobuf:"bytes,30,rep,name=bytes_set,json=bytesSet,proto3" json:"bytes_set,omitempty"`
	// list of any
	RepeatedAny []*anypb.Any `protobuf:"bytes,31,rep,name=repeated_any,json=repeatedAny,proto3" json:"repeated_any,omitempty"`
	// map of any
	MappedAny map[string]*anypb.Any `protobuf:"bytes,32,rep,name=mapped_any,json=mappedAny,proto3" json:"mapped_any,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// list of fieldmask
	RepeatedFmask []*fieldmaskpb.FieldMask `protobuf:"bytes,33,rep,name=repeated_fmask,json=repeatedFmask,proto3" json:"repeated_fmask,omitempty"`
	// map of fieldmask
	MappedFmask map[int32]*fieldmaskpb.FieldMask `protobuf:"bytes,34,rep,name=mapped_fmask,json=mappedFmask,proto3" json:"mapped_fmask,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Kitchen) Reset() {
	*x = Kitchen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kitchen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kitchen) ProtoMessage() {}

func (x *Kitchen) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kitchen.ProtoReflect.Descriptor instead.
func (*Kitchen) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *Kitchen) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Kitchen) GetIsRenovated() bool {
	if x != nil {
		return x.IsRenovated
	}
	return false
}

func (x *Kitchen) GetQrCode() []byte {
	if x != nil {
		return x.QrCode
	}
	return nil
}

func (x *Kitchen) GetNumSmallKnifes() int32 {
	if x != nil {
		return x.NumSmallKnifes
	}
	return 0
}

func (x *Kitchen) GetNumSharpKnifes() uint32 {
	if x != nil {
		return x.NumSharpKnifes
	}
	return 0
}

func (x *Kitchen) GetNumBluntKnifes() uint32 {
	if x != nil {
		return x.NumBluntKnifes
	}
	return 0
}

func (x *Kitchen) GetNumSmallForks() int64 {
	if x != nil {
		return x.NumSmallForks
	}
	return 0
}

func (x *Kitchen) GetNumMediumForks() uint64 {
	if x != nil {
		return x.NumMediumForks
	}
	return 0
}

func (x *Kitchen) GetNumLargeForks() uint64 {
	if x != nil {
		return x.NumLargeForks
	}
	return 0
}

func (x *Kitchen) GetPercentBlackTiles() float32 {
	if x != nil {
		return x.PercentBlackTiles
	}
	return 0
}

func (x *Kitchen) GetPercentWhiteTiles() float64 {
	if x != nil {
		return x.PercentWhiteTiles
	}
	return 0
}

func (x *Kitchen) GetDirtyness() Dirtyness {
	if x != nil {
		return x.Dirtyness
	}
	return Dirtyness_DIRTYNESS_UNSPECIFIED
}

func (x *Kitchen) GetFurniture() map[int64]*Appliance {
	if x != nil {
		return x.Furniture
	}
	return nil
}

func (x *Kitchen) GetCalendar() map[string]int64 {
	if x != nil {
		return x.Calendar
	}
	return nil
}

func (x *Kitchen) GetWasherEngine() *Engine {
	if x != nil {
		return x.WasherEngine
	}
	return nil
}

func (x *Kitchen) GetExtraKitchen() *Kitchen {
	if x != nil {
		return x.ExtraKitchen
	}
	return nil
}

func (x *Kitchen) GetTimer() *durationpb.Duration {
	if x != nil {
		return x.Timer
	}
	return nil
}

func (x *Kitchen) GetWallTime() *timestamppb.Timestamp {
	if x != nil {
		return x.WallTime
	}
	return nil
}

func (x *Kitchen) GetApplianceEngines() []*Engine {
	if x != nil {
		return x.ApplianceEngines
	}
	return nil
}

func (x *Kitchen) GetOtherBrands() []string {
	if x != nil {
		return x.OtherBrands
	}
	return nil
}

func (x *Kitchen) GetSomeAny() *anypb.Any {
	if x != nil {
		return x.SomeAny
	}
	return nil
}

func (x *Kitchen) GetSomeMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.SomeMask
	}
	return nil
}

func (x *Kitchen) GetSomeValue() *structpb.Value {
	if x != nil {
		return x.SomeValue
	}
	return nil
}

func (x *Kitchen) GetOptString() string {
	if x != nil && x.OptString != nil {
		return *x.OptString
	}
	return ""
}

func (x *Kitchen) GetValStr() *wrapperspb.StringValue {
	if x != nil {
		return x.ValStr
	}
	return nil
}

func (x *Kitchen) GetValBytes() *wrapperspb.BytesValue {
	if x != nil {
		return x.ValBytes
	}
	return nil
}

func (x *Kitchen) GetListOfTs() []*timestamppb.Timestamp {
	if x != nil {
		return x.ListOfTs
	}
	return nil
}

func (x *Kitchen) GetStringSet() []string {
	if x != nil {
		return x.StringSet
	}
	return nil
}

func (x *Kitchen) GetNumberSet() []int64 {
	if x != nil {
		return x.NumberSet
	}
	return nil
}

func (x *Kitchen) GetBytesSet() [][]byte {
	if x != nil {
		return x.BytesSet
	}
	return nil
}

func (x *Kitchen) GetRepeatedAny() []*anypb.Any {
	if x != nil {
		return x.RepeatedAny
	}
	return nil
}

func (x *Kitchen) GetMappedAny() map[string]*anypb.Any {
	if x != nil {
		return x.MappedAny
	}
	return nil
}

func (x *Kitchen) GetRepeatedFmask() []*fieldmaskpb.FieldMask {
	if x != nil {
		return x.RepeatedFmask
	}
	return nil
}

func (x *Kitchen) GetMappedFmask() map[int32]*fieldmaskpb.FieldMask {
	if x != nil {
		return x.MappedFmask
	}
	return nil
}

// Empty message
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{5}
}

// MapGalore holds hopefully most of the map combinations. They are in particular difficult
// to generate valid code for.
type MapGalore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all supported key types
	// int64/int64
	Int64Int64 map[int64]int64 `protobuf:"bytes,1,rep,name=int64int64,proto3" json:"int64int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// uint64/uint64
	Uint64Uint64 map[uint64]uint64 `protobuf:"bytes,2,rep,name=uint64uint64,proto3" json:"uint64uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// fixed64/fixed64
	Fixed64Fixed64 map[uint64]uint64 `protobuf:"bytes,3,rep,name=fixed64fixed64,proto3" json:"fixed64fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// sint64/sint64
	Sint64Sint64 map[int64]int64 `protobuf:"bytes,4,rep,name=sint64sint64,proto3" json:"sint64sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	// sfixed64/sfixed64
	Sfixed64Sfixed64 map[int64]int64 `protobuf:"bytes,5,rep,name=sfixed64sfixed64,proto3" json:"sfixed64sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// int32/int32
	Int32Int32 map[int32]int32 `protobuf:"bytes,6,rep,name=int32int32,proto3" json:"int32int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// uint32/uint32
	Uint32Uint32 map[uint32]uint32 `protobuf:"bytes,7,rep,name=uint32uint32,proto3" json:"uint32uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// fixed32/fixed32
	Fixed32Fixed32 map[uint32]uint32 `protobuf:"bytes,8,rep,name=fixed32fixed32,proto3" json:"fixed32fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// sint32/sint32
	Sint32Sint32 map[int32]int32 `protobuf:"bytes,9,rep,name=sint32sint32,proto3" json:"sint32sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	// sfixed32/sfixed32
	Sfixed32Sfixed32 map[int32]int32 `protobuf:"bytes,10,rep,name=sfixed32sfixed32,proto3" json:"sfixed32sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// string/string
	Stringstring map[string]string `protobuf:"bytes,11,rep,name=stringstring,proto3" json:"stringstring,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// bool/bool
	Boolbool map[bool]bool `protobuf:"bytes,12,rep,name=boolbool,proto3" json:"boolbool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// rest of supported value types
	// string/bytes
	Stringbytes map[string][]byte `protobuf:"bytes,13,rep,name=stringbytes,proto3" json:"stringbytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// string/double
	Stringdouble map[string]float64 `protobuf:"bytes,14,rep,name=stringdouble,proto3" json:"stringdouble,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// string/float
	Stringfloat map[string]float32 `protobuf:"bytes,15,rep,name=stringfloat,proto3" json:"stringfloat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// string/duration
	Stringduration map[string]*durationpb.Duration `protobuf:"bytes,16,rep,name=stringduration,proto3" json:"stringduration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// string/duration
	Stringtimestamp map[string]*timestamppb.Timestamp `protobuf:"bytes,17,rep,name=stringtimestamp,proto3" json:"stringtimestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps to messages
	Boolengine map[bool]*Engine `protobuf:"bytes,18,rep,name=boolengine,proto3" json:"boolengine,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maps to messages
	Uintengine map[uint64]*Engine `protobuf:"bytes,19,rep,name=uintengine,proto3" json:"uintengine,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapGalore) Reset() {
	*x = MapGalore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapGalore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapGalore) ProtoMessage() {}

func (x *MapGalore) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapGalore.ProtoReflect.Descriptor instead.
func (*MapGalore) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *MapGalore) GetInt64Int64() map[int64]int64 {
	if x != nil {
		return x.Int64Int64
	}
	return nil
}

func (x *MapGalore) GetUint64Uint64() map[uint64]uint64 {
	if x != nil {
		return x.Uint64Uint64
	}
	return nil
}

func (x *MapGalore) GetFixed64Fixed64() map[uint64]uint64 {
	if x != nil {
		return x.Fixed64Fixed64
	}
	return nil
}

func (x *MapGalore) GetSint64Sint64() map[int64]int64 {
	if x != nil {
		return x.Sint64Sint64
	}
	return nil
}

func (x *MapGalore) GetSfixed64Sfixed64() map[int64]int64 {
	if x != nil {
		return x.Sfixed64Sfixed64
	}
	return nil
}

func (x *MapGalore) GetInt32Int32() map[int32]int32 {
	if x != nil {
		return x.Int32Int32
	}
	return nil
}

func (x *MapGalore) GetUint32Uint32() map[uint32]uint32 {
	if x != nil {
		return x.Uint32Uint32
	}
	return nil
}

func (x *MapGalore) GetFixed32Fixed32() map[uint32]uint32 {
	if x != nil {
		return x.Fixed32Fixed32
	}
	return nil
}

func (x *MapGalore) GetSint32Sint32() map[int32]int32 {
	if x != nil {
		return x.Sint32Sint32
	}
	return nil
}

func (x *MapGalore) GetSfixed32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.Sfixed32Sfixed32
	}
	return nil
}

func (x *MapGalore) GetStringstring() map[string]string {
	if x != nil {
		return x.Stringstring
	}
	return nil
}

func (x *MapGalore) GetBoolbool() map[bool]bool {
	if x != nil {
		return x.Boolbool
	}
	return nil
}

func (x *MapGalore) GetStringbytes() map[string][]byte {
	if x != nil {
		return x.Stringbytes
	}
	return nil
}

func (x *MapGalore) GetStringdouble() map[string]float64 {
	if x != nil {
		return x.Stringdouble
	}
	return nil
}

func (x *MapGalore) GetStringfloat() map[string]float32 {
	if x != nil {
		return x.Stringfloat
	}
	return nil
}

func (x *MapGalore) GetStringduration() map[string]*durationpb.Duration {
	if x != nil {
		return x.Stringduration
	}
	return nil
}

func (x *MapGalore) GetStringtimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.Stringtimestamp
	}
	return nil
}

func (x *MapGalore) GetBoolengine() map[bool]*Engine {
	if x != nil {
		return x.Boolengine
	}
	return nil
}

func (x *MapGalore) GetUintengine() map[uint64]*Engine {
	if x != nil {
		return x.Uintengine
	}
	return nil
}

// Message for testing structpb value marshalling
type ValueGalore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// struct value
	SomeValue *structpb.Value `protobuf:"bytes,1,opt,name=some_value,json=someValue,proto3" json:"some_value,omitempty"`
}

func (x *ValueGalore) Reset() {
	*x = ValueGalore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueGalore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueGalore) ProtoMessage() {}

func (x *ValueGalore) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueGalore.ProtoReflect.Descriptor instead.
func (*ValueGalore) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *ValueGalore) GetSomeValue() *structpb.Value {
	if x != nil {
		return x.SomeValue
	}
	return nil
}

// FieldPresence message is used to experiment and assert field presence in the generated
// attribute map
type FieldPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string field
	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	// optional string field
	OptStr *string `protobuf:"bytes,2,opt,name=opt_str,json=optStr,proto3,oneof" json:"opt_str,omitempty"`
	// msg field
	Msg *Engine `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// optional message field
	OptMsg *Engine `protobuf:"bytes,4,opt,name=opt_msg,json=optMsg,proto3,oneof" json:"opt_msg,omitempty"`
	// list of strings
	StrList []string `protobuf:"bytes,5,rep,name=str_list,json=strList,proto3" json:"str_list,omitempty"`
	// list of messages
	MsgList []*Engine `protobuf:"bytes,6,rep,name=msg_list,json=msgList,proto3" json:"msg_list,omitempty"`
	// map of strings
	StrMap map[string]string `protobuf:"bytes,7,rep,name=str_map,json=strMap,proto3" json:"str_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map of messages
	MsgMap map[string]*Engine `protobuf:"bytes,8,rep,name=msg_map,json=msgMap,proto3" json:"msg_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// enum field
	Enum Dirtyness `protobuf:"varint,9,opt,name=enum,proto3,enum=example.message.v1.Dirtyness" json:"enum,omitempty"`
	// enum field
	OptEnum *Dirtyness `protobuf:"varint,10,opt,name=opt_enum,json=optEnum,proto3,enum=example.message.v1.Dirtyness,oneof" json:"opt_enum,omitempty"`
	// one of field
	//
	// Types that are assignable to Oo:
	//
	//	*FieldPresence_OneofStr
	//	*FieldPresence_OneofMsg
	Oo isFieldPresence_Oo `protobuf_oneof:"oo"`
	// string wrapper
	StrVal *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=str_val,json=strVal,proto3" json:"str_val,omitempty"`
	// bool wrapper
	BoolVal *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	// bytes wrapper
	BytesVal *wrapperspb.BytesValue `protobuf:"bytes,15,opt,name=bytes_val,json=bytesVal,proto3" json:"bytes_val,omitempty"`
	// double wrapper
	DoubleVal *wrapperspb.DoubleValue `protobuf:"bytes,16,opt,name=double_val,json=doubleVal,proto3" json:"double_val,omitempty"`
	// float wrapper
	FloatVal *wrapperspb.FloatValue `protobuf:"bytes,17,opt,name=float_val,json=floatVal,proto3" json:"float_val,omitempty"`
	// // in32 wrapper
	Int32Val *wrapperspb.Int32Value `protobuf:"bytes,18,opt,name=int32_val,json=int32Val,proto3" json:"int32_val,omitempty"`
	// // int64 wrapper
	Int64Val *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=int64_val,json=int64Val,proto3" json:"int64_val,omitempty"`
	// // uint32 wrapper
	Uint32Val *wrapperspb.UInt32Value `protobuf:"bytes,20,opt,name=uint32_val,json=uint32Val,proto3" json:"uint32_val,omitempty"`
	// // uint64 wrapper
	Uint64Val *wrapperspb.UInt64Value `protobuf:"bytes,21,opt,name=uint64_val,json=uint64Val,proto3" json:"uint64_val,omitempty"`
}

func (x *FieldPresence) Reset() {
	*x = FieldPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPresence) ProtoMessage() {}

func (x *FieldPresence) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPresence.ProtoReflect.Descriptor instead.
func (*FieldPresence) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *FieldPresence) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *FieldPresence) GetOptStr() string {
	if x != nil && x.OptStr != nil {
		return *x.OptStr
	}
	return ""
}

func (x *FieldPresence) GetMsg() *Engine {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *FieldPresence) GetOptMsg() *Engine {
	if x != nil {
		return x.OptMsg
	}
	return nil
}

func (x *FieldPresence) GetStrList() []string {
	if x != nil {
		return x.StrList
	}
	return nil
}

func (x *FieldPresence) GetMsgList() []*Engine {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *FieldPresence) GetStrMap() map[string]string {
	if x != nil {
		return x.StrMap
	}
	return nil
}

func (x *FieldPresence) GetMsgMap() map[string]*Engine {
	if x != nil {
		return x.MsgMap
	}
	return nil
}

func (x *FieldPresence) GetEnum() Dirtyness {
	if x != nil {
		return x.Enum
	}
	return Dirtyness_DIRTYNESS_UNSPECIFIED
}

func (x *FieldPresence) GetOptEnum() Dirtyness {
	if x != nil && x.OptEnum != nil {
		return *x.OptEnum
	}
	return Dirtyness_DIRTYNESS_UNSPECIFIED
}

func (m *FieldPresence) GetOo() isFieldPresence_Oo {
	if m != nil {
		return m.Oo
	}
	return nil
}

func (x *FieldPresence) GetOneofStr() string {
	if x, ok := x.GetOo().(*FieldPresence_OneofStr); ok {
		return x.OneofStr
	}
	return ""
}

func (x *FieldPresence) GetOneofMsg() *Engine {
	if x, ok := x.GetOo().(*FieldPresence_OneofMsg); ok {
		return x.OneofMsg
	}
	return nil
}

func (x *FieldPresence) GetStrVal() *wrapperspb.StringValue {
	if x != nil {
		return x.StrVal
	}
	return nil
}

func (x *FieldPresence) GetBoolVal() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolVal
	}
	return nil
}

func (x *FieldPresence) GetBytesVal() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesVal
	}
	return nil
}

func (x *FieldPresence) GetDoubleVal() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleVal
	}
	return nil
}

func (x *FieldPresence) GetFloatVal() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatVal
	}
	return nil
}

func (x *FieldPresence) GetInt32Val() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Val
	}
	return nil
}

func (x *FieldPresence) GetInt64Val() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Val
	}
	return nil
}

func (x *FieldPresence) GetUint32Val() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Val
	}
	return nil
}

func (x *FieldPresence) GetUint64Val() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Val
	}
	return nil
}

type isFieldPresence_Oo interface {
	isFieldPresence_Oo()
}

type FieldPresence_OneofStr struct {
	// string option
	OneofStr string `protobuf:"bytes,11,opt,name=oneof_str,json=oneofStr,proto3,oneof"`
}

type FieldPresence_OneofMsg struct {
	// msg one option
	OneofMsg *Engine `protobuf:"bytes,12,opt,name=oneof_msg,json=oneofMsg,proto3,oneof"`
}

func (*FieldPresence_OneofStr) isFieldPresence_Oo() {}

func (*FieldPresence_OneofMsg) isFieldPresence_Oo() {}

// JsonFields is a message with different fields encoding as json
type JsonFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// encode a list of basic types into json
	JsonStrList []string `protobuf:"bytes,1,rep,name=json_str_list,json=jsonStrList,proto3" json:"json_str_list,omitempty"`
	// embed a json message directly with custom name
	JsonEngine *Engine `protobuf:"bytes,3,opt,name=json_engine,json=jsonEngine,proto3" json:"json_engine,omitempty"`
	// map with an iteger key
	JsonIntMap map[int64]string `protobuf:"bytes,4,rep,name=json_int_map,json=jsonIntMap,proto3" json:"json_int_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// encode a list of messages
	JsonEngineList []*Engine `protobuf:"bytes,2,rep,name=json_engine_list,json=jsonEngineList,proto3" json:"json_engine_list,omitempty"`
	// map with bool key, and message type
	JsonEngineMap map[bool]*Engine `protobuf:"bytes,5,rep,name=json_engine_map,json=jsonEngineMap,proto3" json:"json_engine_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// json encoding of a set
	JsonNrSet []int64 `protobuf:"varint,6,rep,packed,name=json_nr_set,json=jsonNrSet,proto3" json:"json_nr_set,omitempty"`
}

func (x *JsonFields) Reset() {
	*x = JsonFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonFields) ProtoMessage() {}

func (x *JsonFields) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonFields.ProtoReflect.Descriptor instead.
func (*JsonFields) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *JsonFields) GetJsonStrList() []string {
	if x != nil {
		return x.JsonStrList
	}
	return nil
}

func (x *JsonFields) GetJsonEngine() *Engine {
	if x != nil {
		return x.JsonEngine
	}
	return nil
}

func (x *JsonFields) GetJsonIntMap() map[int64]string {
	if x != nil {
		return x.JsonIntMap
	}
	return nil
}

func (x *JsonFields) GetJsonEngineList() []*Engine {
	if x != nil {
		return x.JsonEngineList
	}
	return nil
}

func (x *JsonFields) GetJsonEngineMap() map[bool]*Engine {
	if x != nil {
		return x.JsonEngineMap
	}
	return nil
}

func (x *JsonFields) GetJsonNrSet() []int64 {
	if x != nil {
		return x.JsonNrSet
	}
	return nil
}

// JsonOneOfs for testing json message with oneof field
type JsonOneofs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// one of field
	//
	// Types that are assignable to JsonOo:
	//
	//	*JsonOneofs_OneofStr
	//	*JsonOneofs_OneofMsg
	JsonOo isJsonOneofs_JsonOo `protobuf_oneof:"json_oo"`
}

func (x *JsonOneofs) Reset() {
	*x = JsonOneofs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_message_v1_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonOneofs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonOneofs) ProtoMessage() {}

func (x *JsonOneofs) ProtoReflect() protoreflect.Message {
	mi := &file_example_message_v1_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonOneofs.ProtoReflect.Descriptor instead.
func (*JsonOneofs) Descriptor() ([]byte, []int) {
	return file_example_message_v1_message_proto_rawDescGZIP(), []int{10}
}

func (m *JsonOneofs) GetJsonOo() isJsonOneofs_JsonOo {
	if m != nil {
		return m.JsonOo
	}
	return nil
}

func (x *JsonOneofs) GetOneofStr() string {
	if x, ok := x.GetJsonOo().(*JsonOneofs_OneofStr); ok {
		return x.OneofStr
	}
	return ""
}

func (x *JsonOneofs) GetOneofMsg() *Engine {
	if x, ok := x.GetJsonOo().(*JsonOneofs_OneofMsg); ok {
		return x.OneofMsg
	}
	return nil
}

type isJsonOneofs_JsonOo interface {
	isJsonOneofs_JsonOo()
}

type JsonOneofs_OneofStr struct {
	// string option
	OneofStr string `protobuf:"bytes,7,opt,name=oneof_str,json=oneofStr,proto3,oneof"`
}

type JsonOneofs_OneofMsg struct {
	// msg one option
	OneofMsg *Engine `protobuf:"bytes,8,opt,name=oneof_msg,json=oneofMsg,proto3,oneof"`
}

func (*JsonOneofs_OneofStr) isJsonOneofs_JsonOo() {}

func (*JsonOneofs_OneofMsg) isJsonOneofs_JsonOo() {}

var File_example_message_v1_message_proto protoreflect.FileDescriptor

var file_example_message_v1_message_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x64, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x09, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x7a, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x12, 0x2b, 0x0a, 0x0c, 0x6e, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xd2, 0x44, 0x06, 0x0a, 0x02, 0x77, 0x73, 0x10,
	0x01, 0x52, 0x0a, 0x6e, 0x72, 0x4f, 0x66, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x21, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x22, 0x72, 0x0a, 0x07, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x02, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xd2, 0x44, 0x04,
	0x10, 0x01, 0x20, 0x01, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x17, 0x0a, 0x02, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xd2, 0x44, 0x04, 0x18, 0x01, 0x20, 0x01, 0x52, 0x02, 0x73,
	0x6b, 0x12, 0x1b, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0xd2, 0x44, 0x02, 0x20, 0x01, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0xb9, 0x10, 0x0a, 0x07, 0x4b, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0xd2, 0x44, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x6e, 0x6f, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xd2, 0x44, 0x02, 0x18, 0x01, 0x52, 0x06, 0x71, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x6b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x6e, 0x75, 0x6d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x5f, 0x6b, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61,
	0x72, 0x70, 0x4b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x62, 0x6c, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x75, 0x6e, 0x74, 0x4b, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f,
	0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x46,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x61,
	0x73, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x77,
	0x61, 0x73, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x12, 0x2f, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x77,
	0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x73, 0x6f, 0x6d,
	0x65, 0x41, 0x6e, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a,
	0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x12,
	0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x54, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x05, 0xd2, 0x44, 0x02, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x03, 0x42, 0x05, 0xd2,
	0x44, 0x02, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0c, 0x42, 0x05, 0xd2, 0x44, 0x02, 0x28, 0x01, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x6e, 0x79, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x79, 0x12, 0x49, 0x0a, 0x0a,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x41, 0x6e, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x4f, 0x0a, 0x0c, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x66, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x46, 0x6d, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x6d, 0x61, 0x73, 0x6b, 0x1a, 0x5b, 0x0a, 0x0e, 0x46,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x41,
	0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x10, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x46, 0x6d, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa8, 0x17,
	0x0a, 0x09, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x53, 0x0a, 0x0c, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x59, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x5f, 0x0a, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x53, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61,
	0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x59, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x53, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61,
	0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6c, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x62, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x62,
	0x6f, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x59, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x15, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x62, 0x6f,
	0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a,
	0x0f, 0x55, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x47, 0x61, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1,
	0x0c, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xd2,
	0x44, 0x05, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x29, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xd2,
	0x44, 0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x53, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x42, 0x08, 0xd2, 0x44, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x0b, 0xd2, 0x44,
	0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x4d, 0x73, 0x67, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x70, 0x74,
	0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xd2, 0x44, 0x09, 0x0a, 0x07, 0x73,
	0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x73, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x0c, 0xd2,
	0x44, 0x09, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xd2, 0x44, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x4d, 0x61,
	0x70, 0x52, 0x06, 0x73, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x53, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73,
	0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xd2, 0x44, 0x08, 0x0a, 0x06,
	0x6d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x3c,
	0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x09, 0xd2, 0x44, 0x06,
	0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x4b, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x0c, 0xd2,
	0x44, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x09, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xd2, 0x44,
	0x0a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x48, 0x00, 0x52, 0x08, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x0d, 0xd2, 0x44, 0x0a, 0x0a, 0x08, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x73,
	0x67, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0b, 0xd2, 0x44, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0c, 0xd2, 0x44, 0x09, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xd2, 0x44, 0x0a, 0x0a,
	0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xd2, 0x44, 0x0b, 0x0a, 0x09, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x12, 0x47, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0d, 0xd2, 0x44, 0x0a, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x52,
	0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xd2, 0x44, 0x0a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0d, 0xd2, 0x44, 0x0a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0a, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xd2,
	0x44, 0x0b, 0x0a, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xd2, 0x44, 0x0b, 0x0a,
	0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x55, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x6f, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70,
	0x74, 0x5f, 0x6d, 0x73, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x22, 0xd6, 0x04, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x05, 0xd2, 0x44, 0x02, 0x30, 0x01, 0x52,
	0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0b,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x12, 0xd2,
	0x44, 0x0f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x30,
	0x01, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x57, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x05, 0xd2, 0x44, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x05, 0xd2, 0x44,
	0x02, 0x30, 0x01, 0x52, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x05, 0xd2, 0x44, 0x02, 0x30, 0x01, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x42, 0x07, 0xd2, 0x44, 0x04, 0x28,
	0x01, 0x30, 0x01, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x4e, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x3d,
	0x0a, 0x0f, 0x4a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a,
	0x12, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x0a, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x73, 0x12, 0x24, 0x0a, 0x09, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xd2, 0x44,
	0x02, 0x30, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x12,
	0x40, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x05,
	0xd2, 0x44, 0x02, 0x30, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x73,
	0x67, 0x42, 0x09, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x6f, 0x2a, 0x3b, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x52,
	0x54, 0x59, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x52, 0x54, 0x59, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x42, 0xde, 0x01, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x72, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x45, 0x4d, 0x58, 0xaa, 0x02, 0x12, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x3a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_example_message_v1_message_proto_rawDescOnce sync.Once
	file_example_message_v1_message_proto_rawDescData = file_example_message_v1_message_proto_rawDesc
)

func file_example_message_v1_message_proto_rawDescGZIP() []byte {
	file_example_message_v1_message_proto_rawDescOnce.Do(func() {
		file_example_message_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_example_message_v1_message_proto_rawDescData)
	})
	return file_example_message_v1_message_proto_rawDescData
}

var file_example_message_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_example_message_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_example_message_v1_message_proto_goTypes = []interface{}{
	(Dirtyness)(0),                 // 0: example.message.v1.Dirtyness
	(*Engine)(nil),                 // 1: example.message.v1.Engine
	(*Car)(nil),                    // 2: example.message.v1.Car
	(*Appliance)(nil),              // 3: example.message.v1.Appliance
	(*Ignored)(nil),                // 4: example.message.v1.Ignored
	(*Kitchen)(nil),                // 5: example.message.v1.Kitchen
	(*Empty)(nil),                  // 6: example.message.v1.Empty
	(*MapGalore)(nil),              // 7: example.message.v1.MapGalore
	(*ValueGalore)(nil),            // 8: example.message.v1.ValueGalore
	(*FieldPresence)(nil),          // 9: example.message.v1.FieldPresence
	(*JsonFields)(nil),             // 10: example.message.v1.JsonFields
	(*JsonOneofs)(nil),             // 11: example.message.v1.JsonOneofs
	nil,                            // 12: example.message.v1.Kitchen.FurnitureEntry
	nil,                            // 13: example.message.v1.Kitchen.CalendarEntry
	nil,                            // 14: example.message.v1.Kitchen.MappedAnyEntry
	nil,                            // 15: example.message.v1.Kitchen.MappedFmaskEntry
	nil,                            // 16: example.message.v1.MapGalore.Int64int64Entry
	nil,                            // 17: example.message.v1.MapGalore.Uint64uint64Entry
	nil,                            // 18: example.message.v1.MapGalore.Fixed64fixed64Entry
	nil,                            // 19: example.message.v1.MapGalore.Sint64sint64Entry
	nil,                            // 20: example.message.v1.MapGalore.Sfixed64sfixed64Entry
	nil,                            // 21: example.message.v1.MapGalore.Int32int32Entry
	nil,                            // 22: example.message.v1.MapGalore.Uint32uint32Entry
	nil,                            // 23: example.message.v1.MapGalore.Fixed32fixed32Entry
	nil,                            // 24: example.message.v1.MapGalore.Sint32sint32Entry
	nil,                            // 25: example.message.v1.MapGalore.Sfixed32sfixed32Entry
	nil,                            // 26: example.message.v1.MapGalore.StringstringEntry
	nil,                            // 27: example.message.v1.MapGalore.BoolboolEntry
	nil,                            // 28: example.message.v1.MapGalore.StringbytesEntry
	nil,                            // 29: example.message.v1.MapGalore.StringdoubleEntry
	nil,                            // 30: example.message.v1.MapGalore.StringfloatEntry
	nil,                            // 31: example.message.v1.MapGalore.StringdurationEntry
	nil,                            // 32: example.message.v1.MapGalore.StringtimestampEntry
	nil,                            // 33: example.message.v1.MapGalore.BoolengineEntry
	nil,                            // 34: example.message.v1.MapGalore.UintengineEntry
	nil,                            // 35: example.message.v1.FieldPresence.StrMapEntry
	nil,                            // 36: example.message.v1.FieldPresence.MsgMapEntry
	nil,                            // 37: example.message.v1.JsonFields.JsonIntMapEntry
	nil,                            // 38: example.message.v1.JsonFields.JsonEngineMapEntry
	(*durationpb.Duration)(nil),    // 39: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),  // 40: google.protobuf.Timestamp
	(*anypb.Any)(nil),              // 41: google.protobuf.Any
	(*fieldmaskpb.FieldMask)(nil),  // 42: google.protobuf.FieldMask
	(*structpb.Value)(nil),         // 43: google.protobuf.Value
	(*wrapperspb.StringValue)(nil), // 44: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),  // 45: google.protobuf.BytesValue
	(*wrapperspb.BoolValue)(nil),   // 46: google.protobuf.BoolValue
	(*wrapperspb.DoubleValue)(nil), // 47: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 48: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),  // 49: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 50: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil), // 51: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 52: google.protobuf.UInt64Value
}
var file_example_message_v1_message_proto_depIdxs = []int32{
	0,  // 0: example.message.v1.Engine.dirtyness:type_name -> example.message.v1.Dirtyness
	1,  // 1: example.message.v1.Car.engine:type_name -> example.message.v1.Engine
	0,  // 2: example.message.v1.Kitchen.dirtyness:type_name -> example.message.v1.Dirtyness
	12, // 3: example.message.v1.Kitchen.furniture:type_name -> example.message.v1.Kitchen.FurnitureEntry
	13, // 4: example.message.v1.Kitchen.calendar:type_name -> example.message.v1.Kitchen.CalendarEntry
	1,  // 5: example.message.v1.Kitchen.washer_engine:type_name -> example.message.v1.Engine
	5,  // 6: example.message.v1.Kitchen.extra_kitchen:type_name -> example.message.v1.Kitchen
	39, // 7: example.message.v1.Kitchen.timer:type_name -> google.protobuf.Duration
	40, // 8: example.message.v1.Kitchen.wall_time:type_name -> google.protobuf.Timestamp
	1,  // 9: example.message.v1.Kitchen.appliance_engines:type_name -> example.message.v1.Engine
	41, // 10: example.message.v1.Kitchen.some_any:type_name -> google.protobuf.Any
	42, // 11: example.message.v1.Kitchen.some_mask:type_name -> google.protobuf.FieldMask
	43, // 12: example.message.v1.Kitchen.some_value:type_name -> google.protobuf.Value
	44, // 13: example.message.v1.Kitchen.val_str:type_name -> google.protobuf.StringValue
	45, // 14: example.message.v1.Kitchen.val_bytes:type_name -> google.protobuf.BytesValue
	40, // 15: example.message.v1.Kitchen.list_of_ts:type_name -> google.protobuf.Timestamp
	41, // 16: example.message.v1.Kitchen.repeated_any:type_name -> google.protobuf.Any
	14, // 17: example.message.v1.Kitchen.mapped_any:type_name -> example.message.v1.Kitchen.MappedAnyEntry
	42, // 18: example.message.v1.Kitchen.repeated_fmask:type_name -> google.protobuf.FieldMask
	15, // 19: example.message.v1.Kitchen.mapped_fmask:type_name -> example.message.v1.Kitchen.MappedFmaskEntry
	16, // 20: example.message.v1.MapGalore.int64int64:type_name -> example.message.v1.MapGalore.Int64int64Entry
	17, // 21: example.message.v1.MapGalore.uint64uint64:type_name -> example.message.v1.MapGalore.Uint64uint64Entry
	18, // 22: example.message.v1.MapGalore.fixed64fixed64:type_name -> example.message.v1.MapGalore.Fixed64fixed64Entry
	19, // 23: example.message.v1.MapGalore.sint64sint64:type_name -> example.message.v1.MapGalore.Sint64sint64Entry
	20, // 24: example.message.v1.MapGalore.sfixed64sfixed64:type_name -> example.message.v1.MapGalore.Sfixed64sfixed64Entry
	21, // 25: example.message.v1.MapGalore.int32int32:type_name -> example.message.v1.MapGalore.Int32int32Entry
	22, // 26: example.message.v1.MapGalore.uint32uint32:type_name -> example.message.v1.MapGalore.Uint32uint32Entry
	23, // 27: example.message.v1.MapGalore.fixed32fixed32:type_name -> example.message.v1.MapGalore.Fixed32fixed32Entry
	24, // 28: example.message.v1.MapGalore.sint32sint32:type_name -> example.message.v1.MapGalore.Sint32sint32Entry
	25, // 29: example.message.v1.MapGalore.sfixed32sfixed32:type_name -> example.message.v1.MapGalore.Sfixed32sfixed32Entry
	26, // 30: example.message.v1.MapGalore.stringstring:type_name -> example.message.v1.MapGalore.StringstringEntry
	27, // 31: example.message.v1.MapGalore.boolbool:type_name -> example.message.v1.MapGalore.BoolboolEntry
	28, // 32: example.message.v1.MapGalore.stringbytes:type_name -> example.message.v1.MapGalore.StringbytesEntry
	29, // 33: example.message.v1.MapGalore.stringdouble:type_name -> example.message.v1.MapGalore.StringdoubleEntry
	30, // 34: example.message.v1.MapGalore.stringfloat:type_name -> example.message.v1.MapGalore.StringfloatEntry
	31, // 35: example.message.v1.MapGalore.stringduration:type_name -> example.message.v1.MapGalore.StringdurationEntry
	32, // 36: example.message.v1.MapGalore.stringtimestamp:type_name -> example.message.v1.MapGalore.StringtimestampEntry
	33, // 37: example.message.v1.MapGalore.boolengine:type_name -> example.message.v1.MapGalore.BoolengineEntry
	34, // 38: example.message.v1.MapGalore.uintengine:type_name -> example.message.v1.MapGalore.UintengineEntry
	43, // 39: example.message.v1.ValueGalore.some_value:type_name -> google.protobuf.Value
	1,  // 40: example.message.v1.FieldPresence.msg:type_name -> example.message.v1.Engine
	1,  // 41: example.message.v1.FieldPresence.opt_msg:type_name -> example.message.v1.Engine
	1,  // 42: example.message.v1.FieldPresence.msg_list:type_name -> example.message.v1.Engine
	35, // 43: example.message.v1.FieldPresence.str_map:type_name -> example.message.v1.FieldPresence.StrMapEntry
	36, // 44: example.message.v1.FieldPresence.msg_map:type_name -> example.message.v1.FieldPresence.MsgMapEntry
	0,  // 45: example.message.v1.FieldPresence.enum:type_name -> example.message.v1.Dirtyness
	0,  // 46: example.message.v1.FieldPresence.opt_enum:type_name -> example.message.v1.Dirtyness
	1,  // 47: example.message.v1.FieldPresence.oneof_msg:type_name -> example.message.v1.Engine
	44, // 48: example.message.v1.FieldPresence.str_val:type_name -> google.protobuf.StringValue
	46, // 49: example.message.v1.FieldPresence.bool_val:type_name -> google.protobuf.BoolValue
	45, // 50: example.message.v1.FieldPresence.bytes_val:type_name -> google.protobuf.BytesValue
	47, // 51: example.message.v1.FieldPresence.double_val:type_name -> google.protobuf.DoubleValue
	48, // 52: example.message.v1.FieldPresence.float_val:type_name -> google.protobuf.FloatValue
	49, // 53: example.message.v1.FieldPresence.int32_val:type_name -> google.protobuf.Int32Value
	50, // 54: example.message.v1.FieldPresence.int64_val:type_name -> google.protobuf.Int64Value
	51, // 55: example.message.v1.FieldPresence.uint32_val:type_name -> google.protobuf.UInt32Value
	52, // 56: example.message.v1.FieldPresence.uint64_val:type_name -> google.protobuf.UInt64Value
	1,  // 57: example.message.v1.JsonFields.json_engine:type_name -> example.message.v1.Engine
	37, // 58: example.message.v1.JsonFields.json_int_map:type_name -> example.message.v1.JsonFields.JsonIntMapEntry
	1,  // 59: example.message.v1.JsonFields.json_engine_list:type_name -> example.message.v1.Engine
	38, // 60: example.message.v1.JsonFields.json_engine_map:type_name -> example.message.v1.JsonFields.JsonEngineMapEntry
	1,  // 61: example.message.v1.JsonOneofs.oneof_msg:type_name -> example.message.v1.Engine
	3,  // 62: example.message.v1.Kitchen.FurnitureEntry.value:type_name -> example.message.v1.Appliance
	41, // 63: example.message.v1.Kitchen.MappedAnyEntry.value:type_name -> google.protobuf.Any
	42, // 64: example.message.v1.Kitchen.MappedFmaskEntry.value:type_name -> google.protobuf.FieldMask
	39, // 65: example.message.v1.MapGalore.StringdurationEntry.value:type_name -> google.protobuf.Duration
	40, // 66: example.message.v1.MapGalore.StringtimestampEntry.value:type_name -> google.protobuf.Timestamp
	1,  // 67: example.message.v1.MapGalore.BoolengineEntry.value:type_name -> example.message.v1.Engine
	1,  // 68: example.message.v1.MapGalore.UintengineEntry.value:type_name -> example.message.v1.Engine
	1,  // 69: example.message.v1.FieldPresence.MsgMapEntry.value:type_name -> example.message.v1.Engine
	1,  // 70: example.message.v1.JsonFields.JsonEngineMapEntry.value:type_name -> example.message.v1.Engine
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_example_message_v1_message_proto_init() }
func file_example_message_v1_message_proto_init() {
	if File_example_message_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_example_message_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Engine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appliance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ignored); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kitchen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapGalore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueGalore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_message_v1_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonOneofs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_example_message_v1_message_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_example_message_v1_message_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*FieldPresence_OneofStr)(nil),
		(*FieldPresence_OneofMsg)(nil),
	}
	file_example_message_v1_message_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*JsonOneofs_OneofStr)(nil),
		(*JsonOneofs_OneofMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_example_message_v1_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_example_message_v1_message_proto_goTypes,
		DependencyIndexes: file_example_message_v1_message_proto_depIdxs,
		EnumInfos:         file_example_message_v1_message_proto_enumTypes,
		MessageInfos:      file_example_message_v1_message_proto_msgTypes,
	}.Build()
	File_example_message_v1_message_proto = out.File
	file_example_message_v1_message_proto_rawDesc = nil
	file_example_message_v1_message_proto_goTypes = nil
	file_example_message_v1_message_proto_depIdxs = nil
}
